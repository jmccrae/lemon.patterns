
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 30 17:11:33 CEST 2014
//----------------------------------------------------

package net.lemonmodel.patterns.parser;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 30 17:11:33 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\003\000\002\006\006\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\007\010\000\002\007\010\000\002\007" +
    "\012\000\002\007\012\000\002\007\020\000\002\007\014" +
    "\000\002\007\014\000\002\007\026\000\002\007\022\000" +
    "\002\010\010\000\002\010\014\000\002\010\020\000\002" +
    "\010\004\000\002\010\004\000\002\010\003\000\002\010" +
    "\022\000\002\010\020\000\002\010\016\000\002\010\014" +
    "\000\002\010\016\000\002\010\014\000\002\010\012\000" +
    "\002\010\010\000\002\011\004\000\002\011\004\000\002" +
    "\012\014\000\002\013\010\000\002\013\012\000\002\013" +
    "\012\000\002\013\014\000\002\013\012\000\002\014\002" +
    "\000\002\014\003\000\002\014\005\000\002\015\004\000" +
    "\002\015\005\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\006\000\002\015\006\000\002\015\003\000\002\016\005" +
    "\000\002\016\003\000\002\017\002\000\002\017\003\000" +
    "\002\017\005\000\002\020\003\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\022\003\000\002\022" +
    "\005\000\002\023\003\000\002\023\005\000\002\024\007" +
    "\000\002\024\005\000\002\024\011\000\002\024\007\000" +
    "\002\025\002\000\002\025\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\007\000\002\026" +
    "\007\000\002\026\011\000\002\027\002\000\002\027\003" +
    "\000\002\027\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\005\000\002\031\002\000\002\031\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\005\000\002\035\004\000\002" +
    "\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0188\000\010\002\ufffd\004\ufffd\035\ufffd\001\002\000" +
    "\010\002\000\004\007\035\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\227\u0187\001" +
    "\002\000\010\002\ufffc\004\ufffc\035\ufffc\001\002\000\004" +
    "\007\012\001\002\000\010\005\014\227\016\230\015\001" +
    "\002\000\004\010\022\001\002\000\004\227\021\001\002" +
    "\000\210\005\uff4c\010\uff4c\011\uff4c\014\uff4c\016\uff4c\017" +
    "\uff4c\020\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c\055\uff4c" +
    "\056\uff4c\062\uff4c\064\uff4c\066\uff4c\070\uff4c\071\uff4c\075" +
    "\uff4c\100\uff4c\101\uff4c\103\uff4c\105\uff4c\106\uff4c\107\uff4c" +
    "\112\uff4c\114\uff4c\115\uff4c\116\uff4c\117\uff4c\122\uff4c\125" +
    "\uff4c\126\uff4c\127\uff4c\131\uff4c\132\uff4c\133\uff4c\135\uff4c" +
    "\136\uff4c\137\uff4c\141\uff4c\144\uff4c\145\uff4c\151\uff4c\155" +
    "\uff4c\156\uff4c\160\uff4c\162\uff4c\163\uff4c\164\uff4c\170\uff4c" +
    "\171\uff4c\200\uff4c\201\uff4c\203\uff4c\206\uff4c\207\uff4c\210" +
    "\uff4c\211\uff4c\212\uff4c\216\uff4c\217\uff4c\220\uff4c\222\uff4c" +
    "\225\uff4c\227\uff4c\230\uff4c\001\002\000\004\005\017\001" +
    "\002\000\004\227\020\001\002\000\210\005\uff4e\010\uff4e" +
    "\011\uff4e\014\uff4e\016\uff4e\017\uff4e\020\uff4e\051\uff4e\052" +
    "\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e\062\uff4e\064\uff4e" +
    "\066\uff4e\070\uff4e\071\uff4e\075\uff4e\100\uff4e\101\uff4e\103" +
    "\uff4e\105\uff4e\106\uff4e\107\uff4e\112\uff4e\114\uff4e\115\uff4e" +
    "\116\uff4e\117\uff4e\122\uff4e\125\uff4e\126\uff4e\127\uff4e\131" +
    "\uff4e\132\uff4e\133\uff4e\135\uff4e\136\uff4e\137\uff4e\141\uff4e" +
    "\144\uff4e\145\uff4e\151\uff4e\155\uff4e\156\uff4e\160\uff4e\162" +
    "\uff4e\163\uff4e\164\uff4e\170\uff4e\171\uff4e\200\uff4e\201\uff4e" +
    "\203\uff4e\206\uff4e\207\uff4e\210\uff4e\211\uff4e\212\uff4e\216" +
    "\uff4e\217\uff4e\220\uff4e\222\uff4e\225\uff4e\227\uff4e\230\uff4e" +
    "\001\002\000\210\005\uff4d\010\uff4d\011\uff4d\014\uff4d\016" +
    "\uff4d\017\uff4d\020\uff4d\051\uff4d\052\uff4d\053\uff4d\054\uff4d" +
    "\055\uff4d\056\uff4d\062\uff4d\064\uff4d\066\uff4d\070\uff4d\071" +
    "\uff4d\075\uff4d\100\uff4d\101\uff4d\103\uff4d\105\uff4d\106\uff4d" +
    "\107\uff4d\112\uff4d\114\uff4d\115\uff4d\116\uff4d\117\uff4d\122" +
    "\uff4d\125\uff4d\126\uff4d\127\uff4d\131\uff4d\132\uff4d\133\uff4d" +
    "\135\uff4d\136\uff4d\137\uff4d\141\uff4d\144\uff4d\145\uff4d\151" +
    "\uff4d\155\uff4d\156\uff4d\160\uff4d\162\uff4d\163\uff4d\164\uff4d" +
    "\170\uff4d\171\uff4d\200\uff4d\201\uff4d\203\uff4d\206\uff4d\207" +
    "\uff4d\210\uff4d\211\uff4d\212\uff4d\216\uff4d\217\uff4d\220\uff4d" +
    "\222\uff4d\225\uff4d\227\uff4d\230\uff4d\001\002\000\004\225" +
    "\023\001\002\000\004\010\024\001\002\000\046\011\uffd5" +
    "\021\040\022\037\023\035\026\034\030\050\032\047\033" +
    "\046\034\044\036\043\037\042\043\031\044\030\045\027" +
    "\046\026\047\025\152\054\215\052\001\002\000\004\007" +
    "\u0175\001\002\000\004\007\u0158\001\002\000\004\007\u0147" +
    "\001\002\000\004\007\u013e\001\002\000\004\007\u0135\001" +
    "\002\000\036\010\ufff6\011\ufff6\065\ufff6\111\ufff6\120\ufff6" +
    "\124\ufff6\134\ufff6\143\ufff6\150\ufff6\204\ufff6\213\ufff6\214" +
    "\ufff6\223\ufff6\224\ufff6\001\002\000\050\010\ufff8\011\ufff8" +
    "\065\ufff8\077\u0134\111\ufff8\120\ufff8\121\u0131\124\ufff8\134" +
    "\ufff8\143\ufff8\146\u0133\147\u0132\150\ufff8\157\u0130\204\ufff8" +
    "\213\ufff8\214\ufff8\223\ufff8\224\ufff8\001\002\000\004\007" +
    "\u0128\001\002\000\004\007\u010b\001\002\000\036\010\ufffa" +
    "\011\ufffa\065\310\111\316\120\313\124\311\134\305\143" +
    "\317\150\314\204\312\213\307\214\306\223\321\224\320" +
    "\001\002\000\004\007\256\001\002\000\004\007\251\001" +
    "\002\000\036\010\uffe6\011\uffe6\065\uffe6\111\uffe6\120\uffe6" +
    "\124\uffe6\134\uffe6\143\uffe6\150\uffe6\204\uffe6\213\uffe6\214" +
    "\uffe6\223\uffe6\224\uffe6\001\002\000\004\007\236\001\002" +
    "\000\004\007\225\001\002\000\004\007\216\001\002\000" +
    "\004\011\215\001\002\000\004\007\206\001\002\000\004" +
    "\007\175\001\002\000\004\007\065\001\002\000\006\010" +
    "\063\011\uffd4\001\002\000\006\113\055\140\056\001\002" +
    "\000\036\010\ufff5\011\ufff5\065\ufff5\111\ufff5\120\ufff5\124" +
    "\ufff5\134\ufff5\143\ufff5\150\ufff5\204\ufff5\213\ufff5\214\ufff5" +
    "\223\ufff5\224\ufff5\001\002\000\006\113\055\140\056\001" +
    "\002\000\004\030\050\001\002\000\004\030\050\001\002" +
    "\000\036\010\uffe7\011\uffe7\065\uffe7\111\uffe7\120\uffe7\124" +
    "\uffe7\134\uffe7\143\uffe7\150\uffe7\204\uffe7\213\uffe7\214\uffe7" +
    "\223\uffe7\224\uffe7\001\002\000\036\010\uffdc\011\uffdc\065" +
    "\uffdc\111\uffdc\120\uffdc\124\uffdc\134\uffdc\143\uffdc\150\uffdc" +
    "\204\uffdc\213\uffdc\214\uffdc\223\uffdc\224\uffdc\001\002\000" +
    "\036\010\uffdd\011\uffdd\065\uffdd\111\uffdd\120\uffdd\124\uffdd" +
    "\134\uffdd\143\uffdd\150\uffdd\204\uffdd\213\uffdd\214\uffdd\223" +
    "\uffdd\224\uffdd\001\002\000\036\010\uffe8\011\uffe8\065\uffe8" +
    "\111\uffe8\120\uffe8\124\uffe8\134\uffe8\143\uffe8\150\uffe8\204" +
    "\uffe8\213\uffe8\214\uffe8\223\uffe8\224\uffe8\001\002\000\046" +
    "\011\uffd5\021\040\022\037\023\035\026\034\030\050\032" +
    "\047\033\046\034\044\036\043\037\042\043\031\044\030" +
    "\045\027\046\026\047\025\152\054\215\052\001\002\000" +
    "\004\011\uffd3\001\002\000\006\013\070\225\066\001\002" +
    "\000\004\010\uffbf\001\002\000\004\010\136\001\002\000" +
    "\006\014\uffb7\225\uffb7\001\002\000\006\014\073\225\072" +
    "\001\002\000\004\015\075\001\002\000\004\010\uffbe\001" +
    "\002\000\006\014\uffb6\225\uffb6\001\002\000\062\057\113" +
    "\060\112\061\111\063\110\067\123\072\121\074\120\076" +
    "\117\102\102\104\100\110\126\142\101\153\125\154\124" +
    "\161\122\165\106\166\105\167\104\172\103\176\116\202" +
    "\115\205\114\221\107\225\076\001\002\000\012\012\uff5f" +
    "\014\uff5f\015\131\225\uff5f\001\002\000\010\012\127\014" +
    "\uffba\225\uffba\001\002\000\010\012\uff6d\014\uff6d\225\uff6d" +
    "\001\002\000\010\012\uff6b\014\uff6b\225\uff6b\001\002\000" +
    "\010\012\uff6e\014\uff6e\225\uff6e\001\002\000\010\012\uff64" +
    "\014\uff64\225\uff64\001\002\000\010\012\uff65\014\uff65\225" +
    "\uff65\001\002\000\010\012\uff66\014\uff66\225\uff66\001\002" +
    "\000\010\012\uff67\014\uff67\225\uff67\001\002\000\010\012" +
    "\uff60\014\uff60\225\uff60\001\002\000\010\012\uff73\014\uff73" +
    "\225\uff73\001\002\000\010\012\uff74\014\uff74\225\uff74\001" +
    "\002\000\010\012\uff75\014\uff75\225\uff75\001\002\000\010" +
    "\012\uff76\014\uff76\225\uff76\001\002\000\010\012\uff61\014" +
    "\uff61\225\uff61\001\002\000\010\012\uff62\014\uff62\225\uff62" +
    "\001\002\000\010\012\uff63\014\uff63\225\uff63\001\002\000" +
    "\010\012\uff6f\014\uff6f\225\uff6f\001\002\000\010\012\uff70" +
    "\014\uff70\225\uff70\001\002\000\010\012\uff71\014\uff71\225" +
    "\uff71\001\002\000\010\012\uff68\014\uff68\225\uff68\001\002" +
    "\000\010\012\uff72\014\uff72\225\uff72\001\002\000\010\012" +
    "\uff69\014\uff69\225\uff69\001\002\000\010\012\uff6a\014\uff6a" +
    "\225\uff6a\001\002\000\010\012\uff6c\014\uff6c\225\uff6c\001" +
    "\002\000\004\130\130\001\002\000\006\014\uffbb\225\uffbb" +
    "\001\002\000\062\057\113\060\112\061\111\063\110\067" +
    "\123\072\121\074\120\076\117\102\102\104\100\110\126" +
    "\142\101\153\125\154\124\161\122\165\106\166\105\167" +
    "\104\172\103\176\116\202\115\205\114\221\107\225\132" +
    "\001\002\000\010\012\uff5f\014\uff5f\225\uff5f\001\002\000" +
    "\010\012\134\014\uffb8\225\uffb8\001\002\000\004\130\135" +
    "\001\002\000\006\014\uffb9\225\uffb9\001\002\000\010\005" +
    "\014\227\016\230\015\001\002\000\004\010\140\001\002" +
    "\000\004\013\141\001\002\000\032\005\014\014\uffc6\024" +
    "\151\025\150\027\146\031\145\040\144\041\142\042\143" +
    "\050\153\227\016\230\015\001\002\000\004\007\172\001" +
    "\002\000\004\007\167\001\002\000\014\010\uffc9\011\uffc9" +
    "\014\uffc9\156\uffc9\200\uffc9\001\002\000\014\010\uffce\011" +
    "\uffce\014\uffce\156\uffce\200\uffce\001\002\000\014\010\uffcf" +
    "\011\uffcf\014\uffcf\156\uffcf\200\uffcf\001\002\000\006\010" +
    "\165\014\uffc5\001\002\000\014\010\uffcc\011\uffcc\014\uffcc" +
    "\156\uffcc\200\uffcc\001\002\000\014\010\uffcd\011\uffcd\014" +
    "\uffcd\156\uffcd\200\uffcd\001\002\000\004\064\163\001\002" +
    "\000\014\010\uffd0\011\uffd0\014\uffd0\156\uffd0\200\uffd0\001" +
    "\002\000\014\010\uffc7\011\uffc7\014\uffc7\156\160\200\161" +
    "\001\002\000\004\014\156\001\002\000\004\011\157\001" +
    "\002\000\036\010\uffdb\011\uffdb\065\uffdb\111\uffdb\120\uffdb" +
    "\124\uffdb\134\uffdb\143\uffdb\150\uffdb\204\uffdb\213\uffdb\214" +
    "\uffdb\223\uffdb\224\uffdb\001\002\000\014\010\uffd2\011\uffd2" +
    "\014\uffd2\156\uffd2\200\uffd2\001\002\000\010\005\014\227" +
    "\016\230\015\001\002\000\014\010\uffd1\011\uffd1\014\uffd1" +
    "\156\uffd1\200\uffd1\001\002\000\022\024\151\025\150\027" +
    "\146\031\145\040\144\041\142\042\143\050\153\001\002" +
    "\000\014\010\uffc8\011\uffc8\014\uffc8\156\160\200\161\001" +
    "\002\000\032\005\014\014\uffc6\024\151\025\150\027\146" +
    "\031\145\040\144\041\142\042\143\050\153\227\016\230" +
    "\015\001\002\000\004\014\uffc4\001\002\000\004\225\170" +
    "\001\002\000\004\011\171\001\002\000\014\010\uffcb\011" +
    "\uffcb\014\uffcb\156\uffcb\200\uffcb\001\002\000\004\225\173" +
    "\001\002\000\004\011\174\001\002\000\014\010\uffca\011" +
    "\uffca\014\uffca\156\uffca\200\uffca\001\002\000\006\013\200" +
    "\225\176\001\002\000\004\010\uffbd\001\002\000\004\010" +
    "\203\001\002\000\006\014\uffb7\225\uffb7\001\002\000\006" +
    "\014\202\225\072\001\002\000\004\010\uffbc\001\002\000" +
    "\010\005\014\227\016\230\015\001\002\000\004\011\205" +
    "\001\002\000\036\010\uffda\011\uffda\065\uffda\111\uffda\120" +
    "\uffda\124\uffda\134\uffda\143\uffda\150\uffda\204\uffda\213\uffda" +
    "\214\uffda\223\uffda\224\uffda\001\002\000\006\013\200\225" +
    "\176\001\002\000\004\010\210\001\002\000\010\005\014" +
    "\227\016\230\015\001\002\000\004\010\212\001\002\000" +
    "\004\225\213\001\002\000\004\011\214\001\002\000\036" +
    "\010\uffd8\011\uffd8\065\uffd8\111\uffd8\120\uffd8\124\uffd8\134" +
    "\uffd8\143\uffd8\150\uffd8\204\uffd8\213\uffd8\214\uffd8\223\uffd8" +
    "\224\uffd8\001\002\000\010\002\ufffe\004\ufffe\035\ufffe\001" +
    "\002\000\006\013\200\225\176\001\002\000\004\010\220" +
    "\001\002\000\010\005\014\227\016\230\015\001\002\000" +
    "\004\010\222\001\002\000\010\005\014\227\016\230\015" +
    "\001\002\000\004\011\224\001\002\000\036\010\uffd9\011" +
    "\uffd9\065\uffd9\111\uffd9\120\uffd9\124\uffd9\134\uffd9\143\uffd9" +
    "\150\uffd9\204\uffd9\213\uffd9\214\uffd9\223\uffd9\224\uffd9\001" +
    "\002\000\006\013\230\225\226\001\002\000\004\010\uffc3" +
    "\001\002\000\004\010\233\001\002\000\006\014\uffb7\225" +
    "\uffb7\001\002\000\006\014\232\225\072\001\002\000\004" +
    "\010\uffc2\001\002\000\010\005\014\227\016\230\015\001" +
    "\002\000\004\011\235\001\002\000\050\010\ufff4\011\ufff4" +
    "\065\ufff4\077\ufff4\111\ufff4\120\ufff4\121\ufff4\124\ufff4\134" +
    "\ufff4\143\ufff4\146\ufff4\147\ufff4\150\ufff4\157\ufff4\204\ufff4" +
    "\213\ufff4\214\ufff4\223\ufff4\224\ufff4\001\002\000\006\013" +
    "\240\225\237\001\002\000\004\010\uffc1\001\002\000\006" +
    "\014\uffb7\225\uffb7\001\002\000\004\010\242\001\002\000" +
    "\010\005\014\227\016\230\015\001\002\000\004\010\244" +
    "\001\002\000\010\005\014\227\016\230\015\001\002\000" +
    "\004\011\246\001\002\000\050\010\ufff2\011\ufff2\065\ufff2" +
    "\077\ufff2\111\ufff2\120\ufff2\121\ufff2\124\ufff2\134\ufff2\143" +
    "\ufff2\146\ufff2\147\ufff2\150\ufff2\157\ufff2\204\ufff2\213\ufff2" +
    "\214\ufff2\223\ufff2\224\ufff2\001\002\000\006\014\250\225" +
    "\072\001\002\000\004\010\uffc0\001\002\000\006\013\240" +
    "\225\237\001\002\000\004\010\253\001\002\000\010\005" +
    "\014\227\016\230\015\001\002\000\004\011\255\001\002" +
    "\000\050\010\ufff3\011\ufff3\065\ufff3\077\ufff3\111\ufff3\120" +
    "\ufff3\121\ufff3\124\ufff3\134\ufff3\143\ufff3\146\ufff3\147\ufff3" +
    "\150\ufff3\157\ufff3\204\ufff3\213\ufff3\214\ufff3\223\ufff3\224" +
    "\ufff3\001\002\000\006\013\240\225\237\001\002\000\004" +
    "\010\260\001\002\000\004\073\261\001\002\000\004\012" +
    "\262\001\002\000\010\005\014\227\016\230\015\001\002" +
    "\000\004\010\264\001\002\000\004\175\265\001\002\000" +
    "\004\012\266\001\002\000\010\005\014\227\016\230\015" +
    "\001\002\000\004\010\270\001\002\000\006\173\272\174" +
    "\271\001\002\000\004\012\276\001\002\000\004\012\273" +
    "\001\002\000\022\024\151\025\150\027\146\031\145\040" +
    "\144\041\142\042\143\050\153\001\002\000\010\011\275" +
    "\156\160\200\161\001\002\000\050\010\uffec\011\uffec\065" +
    "\uffec\077\uffec\111\uffec\120\uffec\121\uffec\124\uffec\134\uffec" +
    "\143\uffec\146\uffec\147\uffec\150\uffec\157\uffec\204\uffec\213" +
    "\uffec\214\uffec\223\uffec\224\uffec\001\002\000\022\024\151" +
    "\025\150\027\146\031\145\040\144\041\142\042\143\050" +
    "\153\001\002\000\010\010\300\156\160\200\161\001\002" +
    "\000\004\173\301\001\002\000\004\012\302\001\002\000" +
    "\022\024\151\025\150\027\146\031\145\040\144\041\142" +
    "\042\143\050\153\001\002\000\010\011\304\156\160\200" +
    "\161\001\002\000\050\010\uffed\011\uffed\065\uffed\077\uffed" +
    "\111\uffed\120\uffed\121\uffed\124\uffed\134\uffed\143\uffed\146" +
    "\uffed\147\uffed\150\uffed\157\uffed\204\uffed\213\uffed\214\uffed" +
    "\223\uffed\224\uffed\001\002\000\006\010\uff55\011\uff55\001" +
    "\002\000\006\010\uff50\011\uff50\001\002\000\006\010\uff51" +
    "\011\uff51\001\002\000\006\010\uff59\011\uff59\001\002\000" +
    "\006\010\uff56\011\uff56\001\002\000\006\010\uff52\011\uff52" +
    "\001\002\000\006\010\uff57\011\uff57\001\002\000\006\010" +
    "\uff53\011\uff53\001\002\000\006\010\ufffb\011\ufffb\001\002" +
    "\000\006\010\uff58\011\uff58\001\002\000\006\010\uff54\011" +
    "\uff54\001\002\000\160\005\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\056\uff78\062\uff78\066\uff78\070\uff78\075" +
    "\uff78\100\uff78\101\uff78\106\uff78\107\uff78\112\uff78\114\uff78" +
    "\115\uff78\116\uff78\117\uff78\122\uff78\125\uff78\126\uff78\127" +
    "\uff78\131\uff78\132\uff78\133\uff78\135\uff78\136\uff78\137\uff78" +
    "\141\uff78\144\uff78\145\uff78\151\uff78\155\uff78\160\uff78\162" +
    "\uff78\163\uff78\164\uff78\170\uff78\171\uff78\201\uff78\203\uff78" +
    "\206\uff78\207\uff78\210\uff78\211\uff78\212\uff78\216\uff78\217" +
    "\uff78\220\uff78\222\uff78\225\uff78\227\uff78\230\uff78\001\002" +
    "\000\006\010\uff4f\011\uff4f\001\002\000\160\005\014\051" +
    "\350\052\347\053\346\054\340\055\336\056\334\062\330" +
    "\066\u0102\070\u0100\075\373\100\357\101\356\106\352\107" +
    "\351\112\342\114\341\115\337\116\335\117\333\122\332" +
    "\125\u0104\126\u0103\127\u0101\131\377\132\376\133\375\135" +
    "\372\136\361\137\360\141\355\144\354\145\353\151\324" +
    "\155\u0108\160\u0105\162\370\163\367\164\366\170\364\171" +
    "\362\201\345\203\343\206\331\207\327\210\326\211\325" +
    "\212\323\216\u0107\217\u0106\220\374\222\371\225\344\227" +
    "\016\230\015\001\002\000\160\005\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\062\uff88\066\uff88\070" +
    "\uff88\075\uff88\100\uff88\101\uff88\106\uff88\107\uff88\112\uff88" +
    "\114\uff88\115\uff88\116\uff88\117\uff88\122\uff88\125\uff88\126" +
    "\uff88\127\uff88\131\uff88\132\uff88\133\uff88\135\uff88\136\uff88" +
    "\137\uff88\141\uff88\144\uff88\145\uff88\151\uff88\155\uff88\160" +
    "\uff88\162\uff88\163\uff88\164\uff88\170\uff88\171\uff88\201\uff88" +
    "\203\uff88\206\uff88\207\uff88\210\uff88\211\uff88\212\uff88\216" +
    "\uff88\217\uff88\220\uff88\222\uff88\225\uff88\227\uff88\230\uff88" +
    "\001\002\000\160\005\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\055\uff93\056\uff93\062\uff93\066\uff93\070\uff93\075\uff93" +
    "\100\uff93\101\uff93\106\uff93\107\uff93\112\uff93\114\uff93\115" +
    "\uff93\116\uff93\117\uff93\122\uff93\125\uff93\126\uff93\127\uff93" +
    "\131\uff93\132\uff93\133\uff93\135\uff93\136\uff93\137\uff93\141" +
    "\uff93\144\uff93\145\uff93\151\uff93\155\uff93\160\uff93\162\uff93" +
    "\163\uff93\164\uff93\170\uff93\171\uff93\201\uff93\203\uff93\206" +
    "\uff93\207\uff93\210\uff93\211\uff93\212\uff93\216\uff93\217\uff93" +
    "\220\uff93\222\uff93\225\uff93\227\uff93\230\uff93\001\002\000" +
    "\160\005\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\062\uff8d\066\uff8d\070\uff8d\075\uff8d\100\uff8d\101" +
    "\uff8d\106\uff8d\107\uff8d\112\uff8d\114\uff8d\115\uff8d\116\uff8d" +
    "\117\uff8d\122\uff8d\125\uff8d\126\uff8d\127\uff8d\131\uff8d\132" +
    "\uff8d\133\uff8d\135\uff8d\136\uff8d\137\uff8d\141\uff8d\144\uff8d" +
    "\145\uff8d\151\uff8d\155\uff8d\160\uff8d\162\uff8d\163\uff8d\164" +
    "\uff8d\170\uff8d\171\uff8d\201\uff8d\203\uff8d\206\uff8d\207\uff8d" +
    "\210\uff8d\211\uff8d\212\uff8d\216\uff8d\217\uff8d\220\uff8d\222" +
    "\uff8d\225\uff8d\227\uff8d\230\uff8d\001\002\000\160\005\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\062" +
    "\uff8e\066\uff8e\070\uff8e\075\uff8e\100\uff8e\101\uff8e\106\uff8e" +
    "\107\uff8e\112\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e\122" +
    "\uff8e\125\uff8e\126\uff8e\127\uff8e\131\uff8e\132\uff8e\133\uff8e" +
    "\135\uff8e\136\uff8e\137\uff8e\141\uff8e\144\uff8e\145\uff8e\151" +
    "\uff8e\155\uff8e\160\uff8e\162\uff8e\163\uff8e\164\uff8e\170\uff8e" +
    "\171\uff8e\201\uff8e\203\uff8e\206\uff8e\207\uff8e\210\uff8e\211" +
    "\uff8e\212\uff8e\216\uff8e\217\uff8e\220\uff8e\222\uff8e\225\uff8e" +
    "\227\uff8e\230\uff8e\001\002\000\160\005\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\062\uff7e\066\uff7e" +
    "\070\uff7e\075\uff7e\100\uff7e\101\uff7e\106\uff7e\107\uff7e\112" +
    "\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e\122\uff7e\125\uff7e" +
    "\126\uff7e\127\uff7e\131\uff7e\132\uff7e\133\uff7e\135\uff7e\136" +
    "\uff7e\137\uff7e\141\uff7e\144\uff7e\145\uff7e\151\uff7e\155\uff7e" +
    "\160\uff7e\162\uff7e\163\uff7e\164\uff7e\170\uff7e\171\uff7e\201" +
    "\uff7e\203\uff7e\206\uff7e\207\uff7e\210\uff7e\211\uff7e\212\uff7e" +
    "\216\uff7e\217\uff7e\220\uff7e\222\uff7e\225\uff7e\227\uff7e\230" +
    "\uff7e\001\002\000\160\005\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\062\uffa3\066\uffa3\070\uffa3\075" +
    "\uffa3\100\uffa3\101\uffa3\106\uffa3\107\uffa3\112\uffa3\114\uffa3" +
    "\115\uffa3\116\uffa3\117\uffa3\122\uffa3\125\uffa3\126\uffa3\127" +
    "\uffa3\131\uffa3\132\uffa3\133\uffa3\135\uffa3\136\uffa3\137\uffa3" +
    "\141\uffa3\144\uffa3\145\uffa3\151\uffa3\155\uffa3\160\uffa3\162" +
    "\uffa3\163\uffa3\164\uffa3\170\uffa3\171\uffa3\201\uffa3\203\uffa3" +
    "\206\uffa3\207\uffa3\210\uffa3\211\uffa3\212\uffa3\216\uffa3\217" +
    "\uffa3\220\uffa3\222\uffa3\225\uffa3\227\uffa3\230\uffa3\001\002" +
    "\000\160\005\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\056\uff8f\062\uff8f\066\uff8f\070\uff8f\075\uff8f\100\uff8f" +
    "\101\uff8f\106\uff8f\107\uff8f\112\uff8f\114\uff8f\115\uff8f\116" +
    "\uff8f\117\uff8f\122\uff8f\125\uff8f\126\uff8f\127\uff8f\131\uff8f" +
    "\132\uff8f\133\uff8f\135\uff8f\136\uff8f\137\uff8f\141\uff8f\144" +
    "\uff8f\145\uff8f\151\uff8f\155\uff8f\160\uff8f\162\uff8f\163\uff8f" +
    "\164\uff8f\170\uff8f\171\uff8f\201\uff8f\203\uff8f\206\uff8f\207" +
    "\uff8f\210\uff8f\211\uff8f\212\uff8f\216\uff8f\217\uff8f\220\uff8f" +
    "\222\uff8f\225\uff8f\227\uff8f\230\uff8f\001\002\000\160\005" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84" +
    "\062\uff84\066\uff84\070\uff84\075\uff84\100\uff84\101\uff84\106" +
    "\uff84\107\uff84\112\uff84\114\uff84\115\uff84\116\uff84\117\uff84" +
    "\122\uff84\125\uff84\126\uff84\127\uff84\131\uff84\132\uff84\133" +
    "\uff84\135\uff84\136\uff84\137\uff84\141\uff84\144\uff84\145\uff84" +
    "\151\uff84\155\uff84\160\uff84\162\uff84\163\uff84\164\uff84\170" +
    "\uff84\171\uff84\201\uff84\203\uff84\206\uff84\207\uff84\210\uff84" +
    "\211\uff84\212\uff84\216\uff84\217\uff84\220\uff84\222\uff84\225" +
    "\uff84\227\uff84\230\uff84\001\002\000\160\005\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\062\uff9a\066" +
    "\uff9a\070\uff9a\075\uff9a\100\uff9a\101\uff9a\106\uff9a\107\uff9a" +
    "\112\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a\122\uff9a\125" +
    "\uff9a\126\uff9a\127\uff9a\131\uff9a\132\uff9a\133\uff9a\135\uff9a" +
    "\136\uff9a\137\uff9a\141\uff9a\144\uff9a\145\uff9a\151\uff9a\155" +
    "\uff9a\160\uff9a\162\uff9a\163\uff9a\164\uff9a\170\uff9a\171\uff9a" +
    "\201\uff9a\203\uff9a\206\uff9a\207\uff9a\210\uff9a\211\uff9a\212" +
    "\uff9a\216\uff9a\217\uff9a\220\uff9a\222\uff9a\225\uff9a\227\uff9a" +
    "\230\uff9a\001\002\000\160\005\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\062\uffa4\066\uffa4\070\uffa4" +
    "\075\uffa4\100\uffa4\101\uffa4\106\uffa4\107\uffa4\112\uffa4\114" +
    "\uffa4\115\uffa4\116\uffa4\117\uffa4\122\uffa4\125\uffa4\126\uffa4" +
    "\127\uffa4\131\uffa4\132\uffa4\133\uffa4\135\uffa4\136\uffa4\137" +
    "\uffa4\141\uffa4\144\uffa4\145\uffa4\151\uffa4\155\uffa4\160\uffa4" +
    "\162\uffa4\163\uffa4\164\uffa4\170\uffa4\171\uffa4\201\uffa4\203" +
    "\uffa4\206\uffa4\207\uffa4\210\uffa4\211\uffa4\212\uffa4\216\uffa4" +
    "\217\uffa4\220\uffa4\222\uffa4\225\uffa4\227\uffa4\230\uffa4\001" +
    "\002\000\160\005\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\062\uff9b\066\uff9b\070\uff9b\075\uff9b\100" +
    "\uff9b\101\uff9b\106\uff9b\107\uff9b\112\uff9b\114\uff9b\115\uff9b" +
    "\116\uff9b\117\uff9b\122\uff9b\125\uff9b\126\uff9b\127\uff9b\131" +
    "\uff9b\132\uff9b\133\uff9b\135\uff9b\136\uff9b\137\uff9b\141\uff9b" +
    "\144\uff9b\145\uff9b\151\uff9b\155\uff9b\160\uff9b\162\uff9b\163" +
    "\uff9b\164\uff9b\170\uff9b\171\uff9b\201\uff9b\203\uff9b\206\uff9b" +
    "\207\uff9b\210\uff9b\211\uff9b\212\uff9b\216\uff9b\217\uff9b\220" +
    "\uff9b\222\uff9b\225\uff9b\227\uff9b\230\uff9b\001\002\000\160" +
    "\005\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\062\uffa5\066\uffa5\070\uffa5\075\uffa5\100\uffa5\101\uffa5" +
    "\106\uffa5\107\uffa5\112\uffa5\114\uffa5\115\uffa5\116\uffa5\117" +
    "\uffa5\122\uffa5\125\uffa5\126\uffa5\127\uffa5\131\uffa5\132\uffa5" +
    "\133\uffa5\135\uffa5\136\uffa5\137\uffa5\141\uffa5\144\uffa5\145" +
    "\uffa5\151\uffa5\155\uffa5\160\uffa5\162\uffa5\163\uffa5\164\uffa5" +
    "\170\uffa5\171\uffa5\201\uffa5\203\uffa5\206\uffa5\207\uffa5\210" +
    "\uffa5\211\uffa5\212\uffa5\216\uffa5\217\uffa5\220\uffa5\222\uffa5" +
    "\225\uffa5\227\uffa5\230\uffa5\001\002\000\160\005\uff9c\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\062\uff9c" +
    "\066\uff9c\070\uff9c\075\uff9c\100\uff9c\101\uff9c\106\uff9c\107" +
    "\uff9c\112\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\122\uff9c" +
    "\125\uff9c\126\uff9c\127\uff9c\131\uff9c\132\uff9c\133\uff9c\135" +
    "\uff9c\136\uff9c\137\uff9c\141\uff9c\144\uff9c\145\uff9c\151\uff9c" +
    "\155\uff9c\160\uff9c\162\uff9c\163\uff9c\164\uff9c\170\uff9c\171" +
    "\uff9c\201\uff9c\203\uff9c\206\uff9c\207\uff9c\210\uff9c\211\uff9c" +
    "\212\uff9c\216\uff9c\217\uff9c\220\uff9c\222\uff9c\225\uff9c\227" +
    "\uff9c\230\uff9c\001\002\000\160\005\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\062\uffa6\066\uffa6\070" +
    "\uffa6\075\uffa6\100\uffa6\101\uffa6\106\uffa6\107\uffa6\112\uffa6" +
    "\114\uffa6\115\uffa6\116\uffa6\117\uffa6\122\uffa6\125\uffa6\126" +
    "\uffa6\127\uffa6\131\uffa6\132\uffa6\133\uffa6\135\uffa6\136\uffa6" +
    "\137\uffa6\141\uffa6\144\uffa6\145\uffa6\151\uffa6\155\uffa6\160" +
    "\uffa6\162\uffa6\163\uffa6\164\uffa6\170\uffa6\171\uffa6\201\uffa6" +
    "\203\uffa6\206\uffa6\207\uffa6\210\uffa6\211\uffa6\212\uffa6\216" +
    "\uffa6\217\uffa6\220\uffa6\222\uffa6\225\uffa6\227\uffa6\230\uffa6" +
    "\001\002\000\160\005\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\062\uff9d\066\uff9d\070\uff9d\075\uff9d" +
    "\100\uff9d\101\uff9d\106\uff9d\107\uff9d\112\uff9d\114\uff9d\115" +
    "\uff9d\116\uff9d\117\uff9d\122\uff9d\125\uff9d\126\uff9d\127\uff9d" +
    "\131\uff9d\132\uff9d\133\uff9d\135\uff9d\136\uff9d\137\uff9d\141" +
    "\uff9d\144\uff9d\145\uff9d\151\uff9d\155\uff9d\160\uff9d\162\uff9d" +
    "\163\uff9d\164\uff9d\170\uff9d\171\uff9d\201\uff9d\203\uff9d\206" +
    "\uff9d\207\uff9d\210\uff9d\211\uff9d\212\uff9d\216\uff9d\217\uff9d" +
    "\220\uff9d\222\uff9d\225\uff9d\227\uff9d\230\uff9d\001\002\000" +
    "\160\005\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\062\uffab\066\uffab\070\uffab\075\uffab\100\uffab\101" +
    "\uffab\106\uffab\107\uffab\112\uffab\114\uffab\115\uffab\116\uffab" +
    "\117\uffab\122\uffab\125\uffab\126\uffab\127\uffab\131\uffab\132" +
    "\uffab\133\uffab\135\uffab\136\uffab\137\uffab\141\uffab\144\uffab" +
    "\145\uffab\151\uffab\155\uffab\160\uffab\162\uffab\163\uffab\164" +
    "\uffab\170\uffab\171\uffab\201\uffab\203\uffab\206\uffab\207\uffab" +
    "\210\uffab\211\uffab\212\uffab\216\uffab\217\uffab\220\uffab\222" +
    "\uffab\225\uffab\227\uffab\230\uffab\001\002\000\160\005\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\062" +
    "\uffac\066\uffac\070\uffac\075\uffac\100\uffac\101\uffac\106\uffac" +
    "\107\uffac\112\uffac\114\uffac\115\uffac\116\uffac\117\uffac\122" +
    "\uffac\125\uffac\126\uffac\127\uffac\131\uffac\132\uffac\133\uffac" +
    "\135\uffac\136\uffac\137\uffac\141\uffac\144\uffac\145\uffac\151" +
    "\uffac\155\uffac\160\uffac\162\uffac\163\uffac\164\uffac\170\uffac" +
    "\171\uffac\201\uffac\203\uffac\206\uffac\207\uffac\210\uffac\211" +
    "\uffac\212\uffac\216\uffac\217\uffac\220\uffac\222\uffac\225\uffac" +
    "\227\uffac\230\uffac\001\002\000\036\010\ufff9\011\ufff9\065" +
    "\ufff9\111\ufff9\120\ufff9\124\ufff9\134\ufff9\143\ufff9\150\ufff9" +
    "\204\ufff9\213\ufff9\214\ufff9\223\ufff9\224\ufff9\001\002\000" +
    "\160\005\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83" +
    "\056\uff83\062\uff83\066\uff83\070\uff83\075\uff83\100\uff83\101" +
    "\uff83\106\uff83\107\uff83\112\uff83\114\uff83\115\uff83\116\uff83" +
    "\117\uff83\122\uff83\125\uff83\126\uff83\127\uff83\131\uff83\132" +
    "\uff83\133\uff83\135\uff83\136\uff83\137\uff83\141\uff83\144\uff83" +
    "\145\uff83\151\uff83\155\uff83\160\uff83\162\uff83\163\uff83\164" +
    "\uff83\170\uff83\171\uff83\201\uff83\203\uff83\206\uff83\207\uff83" +
    "\210\uff83\211\uff83\212\uff83\216\uff83\217\uff83\220\uff83\222" +
    "\uff83\225\uff83\227\uff83\230\uff83\001\002\000\160\005\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\062" +
    "\uffa7\066\uffa7\070\uffa7\075\uffa7\100\uffa7\101\uffa7\106\uffa7" +
    "\107\uffa7\112\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7\122" +
    "\uffa7\125\uffa7\126\uffa7\127\uffa7\131\uffa7\132\uffa7\133\uffa7" +
    "\135\uffa7\136\uffa7\137\uffa7\141\uffa7\144\uffa7\145\uffa7\151" +
    "\uffa7\155\uffa7\160\uffa7\162\uffa7\163\uffa7\164\uffa7\170\uffa7" +
    "\171\uffa7\201\uffa7\203\uffa7\206\uffa7\207\uffa7\210\uffa7\211" +
    "\uffa7\212\uffa7\216\uffa7\217\uffa7\220\uffa7\222\uffa7\225\uffa7" +
    "\227\uffa7\230\uffa7\001\002\000\160\005\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\062\uffa8\066\uffa8" +
    "\070\uffa8\075\uffa8\100\uffa8\101\uffa8\106\uffa8\107\uffa8\112" +
    "\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8\122\uffa8\125\uffa8" +
    "\126\uffa8\127\uffa8\131\uffa8\132\uffa8\133\uffa8\135\uffa8\136" +
    "\uffa8\137\uffa8\141\uffa8\144\uffa8\145\uffa8\151\uffa8\155\uffa8" +
    "\160\uffa8\162\uffa8\163\uffa8\164\uffa8\170\uffa8\171\uffa8\201" +
    "\uffa8\203\uffa8\206\uffa8\207\uffa8\210\uffa8\211\uffa8\212\uffa8" +
    "\216\uffa8\217\uffa8\220\uffa8\222\uffa8\225\uffa8\227\uffa8\230" +
    "\uffa8\001\002\000\160\005\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\062\uffa9\066\uffa9\070\uffa9\075" +
    "\uffa9\100\uffa9\101\uffa9\106\uffa9\107\uffa9\112\uffa9\114\uffa9" +
    "\115\uffa9\116\uffa9\117\uffa9\122\uffa9\125\uffa9\126\uffa9\127" +
    "\uffa9\131\uffa9\132\uffa9\133\uffa9\135\uffa9\136\uffa9\137\uffa9" +
    "\141\uffa9\144\uffa9\145\uffa9\151\uffa9\155\uffa9\160\uffa9\162" +
    "\uffa9\163\uffa9\164\uffa9\170\uffa9\171\uffa9\201\uffa9\203\uffa9" +
    "\206\uffa9\207\uffa9\210\uffa9\211\uffa9\212\uffa9\216\uffa9\217" +
    "\uffa9\220\uffa9\222\uffa9\225\uffa9\227\uffa9\230\uffa9\001\002" +
    "\000\160\005\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\062\uff9e\066\uff9e\070\uff9e\075\uff9e\100\uff9e" +
    "\101\uff9e\106\uff9e\107\uff9e\112\uff9e\114\uff9e\115\uff9e\116" +
    "\uff9e\117\uff9e\122\uff9e\125\uff9e\126\uff9e\127\uff9e\131\uff9e" +
    "\132\uff9e\133\uff9e\135\uff9e\136\uff9e\137\uff9e\141\uff9e\144" +
    "\uff9e\145\uff9e\151\uff9e\155\uff9e\160\uff9e\162\uff9e\163\uff9e" +
    "\164\uff9e\170\uff9e\171\uff9e\201\uff9e\203\uff9e\206\uff9e\207" +
    "\uff9e\210\uff9e\211\uff9e\212\uff9e\216\uff9e\217\uff9e\220\uff9e" +
    "\222\uff9e\225\uff9e\227\uff9e\230\uff9e\001\002\000\160\005" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\062\uff9f\066\uff9f\070\uff9f\075\uff9f\100\uff9f\101\uff9f\106" +
    "\uff9f\107\uff9f\112\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f" +
    "\122\uff9f\125\uff9f\126\uff9f\127\uff9f\131\uff9f\132\uff9f\133" +
    "\uff9f\135\uff9f\136\uff9f\137\uff9f\141\uff9f\144\uff9f\145\uff9f" +
    "\151\uff9f\155\uff9f\160\uff9f\162\uff9f\163\uff9f\164\uff9f\170" +
    "\uff9f\171\uff9f\201\uff9f\203\uff9f\206\uff9f\207\uff9f\210\uff9f" +
    "\211\uff9f\212\uff9f\216\uff9f\217\uff9f\220\uff9f\222\uff9f\225" +
    "\uff9f\227\uff9f\230\uff9f\001\002\000\160\005\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\062\uff94\066" +
    "\uff94\070\uff94\075\uff94\100\uff94\101\uff94\106\uff94\107\uff94" +
    "\112\uff94\114\uff94\115\uff94\116\uff94\117\uff94\122\uff94\125" +
    "\uff94\126\uff94\127\uff94\131\uff94\132\uff94\133\uff94\135\uff94" +
    "\136\uff94\137\uff94\141\uff94\144\uff94\145\uff94\151\uff94\155" +
    "\uff94\160\uff94\162\uff94\163\uff94\164\uff94\170\uff94\171\uff94" +
    "\201\uff94\203\uff94\206\uff94\207\uff94\210\uff94\211\uff94\212" +
    "\uff94\216\uff94\217\uff94\220\uff94\222\uff94\225\uff94\227\uff94" +
    "\230\uff94\001\002\000\160\005\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\062\uff95\066\uff95\070\uff95" +
    "\075\uff95\100\uff95\101\uff95\106\uff95\107\uff95\112\uff95\114" +
    "\uff95\115\uff95\116\uff95\117\uff95\122\uff95\125\uff95\126\uff95" +
    "\127\uff95\131\uff95\132\uff95\133\uff95\135\uff95\136\uff95\137" +
    "\uff95\141\uff95\144\uff95\145\uff95\151\uff95\155\uff95\160\uff95" +
    "\162\uff95\163\uff95\164\uff95\170\uff95\171\uff95\201\uff95\203" +
    "\uff95\206\uff95\207\uff95\210\uff95\211\uff95\212\uff95\216\uff95" +
    "\217\uff95\220\uff95\222\uff95\225\uff95\227\uff95\230\uff95\001" +
    "\002\000\160\005\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\062\uff96\066\uff96\070\uff96\075\uff96\100" +
    "\uff96\101\uff96\106\uff96\107\uff96\112\uff96\114\uff96\115\uff96" +
    "\116\uff96\117\uff96\122\uff96\125\uff96\126\uff96\127\uff96\131" +
    "\uff96\132\uff96\133\uff96\135\uff96\136\uff96\137\uff96\141\uff96" +
    "\144\uff96\145\uff96\151\uff96\155\uff96\160\uff96\162\uff96\163" +
    "\uff96\164\uff96\170\uff96\171\uff96\201\uff96\203\uff96\206\uff96" +
    "\207\uff96\210\uff96\211\uff96\212\uff96\216\uff96\217\uff96\220" +
    "\uff96\222\uff96\225\uff96\227\uff96\230\uff96\001\002\000\160" +
    "\005\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\062\uff7d\066\uff7d\070\uff7d\075\uff7d\100\uff7d\101\uff7d" +
    "\106\uff7d\107\uff7d\112\uff7d\114\uff7d\115\uff7d\116\uff7d\117" +
    "\uff7d\122\uff7d\125\uff7d\126\uff7d\127\uff7d\131\uff7d\132\uff7d" +
    "\133\uff7d\135\uff7d\136\uff7d\137\uff7d\141\uff7d\144\uff7d\145" +
    "\uff7d\151\uff7d\155\uff7d\160\uff7d\162\uff7d\163\uff7d\164\uff7d" +
    "\170\uff7d\171\uff7d\201\uff7d\203\uff7d\206\uff7d\207\uff7d\210" +
    "\uff7d\211\uff7d\212\uff7d\216\uff7d\217\uff7d\220\uff7d\222\uff7d" +
    "\225\uff7d\227\uff7d\230\uff7d\001\002\000\160\005\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\062\uff89" +
    "\066\uff89\070\uff89\075\uff89\100\uff89\101\uff89\106\uff89\107" +
    "\uff89\112\uff89\114\uff89\115\uff89\116\uff89\117\uff89\122\uff89" +
    "\125\uff89\126\uff89\127\uff89\131\uff89\132\uff89\133\uff89\135" +
    "\uff89\136\uff89\137\uff89\141\uff89\144\uff89\145\uff89\151\uff89" +
    "\155\uff89\160\uff89\162\uff89\163\uff89\164\uff89\170\uff89\171" +
    "\uff89\201\uff89\203\uff89\206\uff89\207\uff89\210\uff89\211\uff89" +
    "\212\uff89\216\uff89\217\uff89\220\uff89\222\uff89\225\uff89\227" +
    "\uff89\230\uff89\001\002\000\160\005\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\062\uff7b\066\uff7b\070" +
    "\uff7b\075\uff7b\100\uff7b\101\uff7b\106\uff7b\107\uff7b\112\uff7b" +
    "\114\uff7b\115\uff7b\116\uff7b\117\uff7b\122\uff7b\125\uff7b\126" +
    "\uff7b\127\uff7b\131\uff7b\132\uff7b\133\uff7b\135\uff7b\136\uff7b" +
    "\137\uff7b\141\uff7b\144\uff7b\145\uff7b\151\uff7b\155\uff7b\160" +
    "\uff7b\162\uff7b\163\uff7b\164\uff7b\170\uff7b\171\uff7b\201\uff7b" +
    "\203\uff7b\206\uff7b\207\uff7b\210\uff7b\211\uff7b\212\uff7b\216" +
    "\uff7b\217\uff7b\220\uff7b\222\uff7b\225\uff7b\227\uff7b\230\uff7b" +
    "\001\002\000\160\005\uff97\051\uff97\052\uff97\053\uff97\054" +
    "\uff97\055\uff97\056\uff97\062\uff97\066\uff97\070\uff97\075\uff97" +
    "\100\uff97\101\uff97\106\uff97\107\uff97\112\uff97\114\uff97\115" +
    "\uff97\116\uff97\117\uff97\122\uff97\125\uff97\126\uff97\127\uff97" +
    "\131\uff97\132\uff97\133\uff97\135\uff97\136\uff97\137\uff97\141" +
    "\uff97\144\uff97\145\uff97\151\uff97\155\uff97\160\uff97\162\uff97" +
    "\163\uff97\164\uff97\170\uff97\171\uff97\201\uff97\203\uff97\206" +
    "\uff97\207\uff97\210\uff97\211\uff97\212\uff97\216\uff97\217\uff97" +
    "\220\uff97\222\uff97\225\uff97\227\uff97\230\uff97\001\002\000" +
    "\160\005\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90" +
    "\056\uff90\062\uff90\066\uff90\070\uff90\075\uff90\100\uff90\101" +
    "\uff90\106\uff90\107\uff90\112\uff90\114\uff90\115\uff90\116\uff90" +
    "\117\uff90\122\uff90\125\uff90\126\uff90\127\uff90\131\uff90\132" +
    "\uff90\133\uff90\135\uff90\136\uff90\137\uff90\141\uff90\144\uff90" +
    "\145\uff90\151\uff90\155\uff90\160\uff90\162\uff90\163\uff90\164" +
    "\uff90\170\uff90\171\uff90\201\uff90\203\uff90\206\uff90\207\uff90" +
    "\210\uff90\211\uff90\212\uff90\216\uff90\217\uff90\220\uff90\222" +
    "\uff90\225\uff90\227\uff90\230\uff90\001\002\000\004\020\u0109" +
    "\001\002\000\160\005\uff87\051\uff87\052\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\062\uff87\066\uff87\070\uff87\075\uff87" +
    "\100\uff87\101\uff87\106\uff87\107\uff87\112\uff87\114\uff87\115" +
    "\uff87\116\uff87\117\uff87\122\uff87\125\uff87\126\uff87\127\uff87" +
    "\131\uff87\132\uff87\133\uff87\135\uff87\136\uff87\137\uff87\141" +
    "\uff87\144\uff87\145\uff87\151\uff87\155\uff87\160\uff87\162\uff87" +
    "\163\uff87\164\uff87\170\uff87\171\uff87\201\uff87\203\uff87\206" +
    "\uff87\207\uff87\210\uff87\211\uff87\212\uff87\216\uff87\217\uff87" +
    "\220\uff87\222\uff87\225\uff87\227\uff87\230\uff87\001\002\000" +
    "\160\005\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77" +
    "\056\uff77\062\uff77\066\uff77\070\uff77\075\uff77\100\uff77\101" +
    "\uff77\106\uff77\107\uff77\112\uff77\114\uff77\115\uff77\116\uff77" +
    "\117\uff77\122\uff77\125\uff77\126\uff77\127\uff77\131\uff77\132" +
    "\uff77\133\uff77\135\uff77\136\uff77\137\uff77\141\uff77\144\uff77" +
    "\145\uff77\151\uff77\155\uff77\160\uff77\162\uff77\163\uff77\164" +
    "\uff77\170\uff77\171\uff77\201\uff77\203\uff77\206\uff77\207\uff77" +
    "\210\uff77\211\uff77\212\uff77\216\uff77\217\uff77\220\uff77\222" +
    "\uff77\225\uff77\227\uff77\230\uff77\001\002\000\160\005\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\062" +
    "\uffaa\066\uffaa\070\uffaa\075\uffaa\100\uffaa\101\uffaa\106\uffaa" +
    "\107\uffaa\112\uffaa\114\uffaa\115\uffaa\116\uffaa\117\uffaa\122" +
    "\uffaa\125\uffaa\126\uffaa\127\uffaa\131\uffaa\132\uffaa\133\uffaa" +
    "\135\uffaa\136\uffaa\137\uffaa\141\uffaa\144\uffaa\145\uffaa\151" +
    "\uffaa\155\uffaa\160\uffaa\162\uffaa\163\uffaa\164\uffaa\170\uffaa" +
    "\171\uffaa\201\uffaa\203\uffaa\206\uffaa\207\uffaa\210\uffaa\211" +
    "\uffaa\212\uffaa\216\uffaa\217\uffaa\220\uffaa\222\uffaa\225\uffaa" +
    "\227\uffaa\230\uffaa\001\002\000\160\005\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\062\uff86\066\uff86" +
    "\070\uff86\075\uff86\100\uff86\101\uff86\106\uff86\107\uff86\112" +
    "\uff86\114\uff86\115\uff86\116\uff86\117\uff86\122\uff86\125\uff86" +
    "\126\uff86\127\uff86\131\uff86\132\uff86\133\uff86\135\uff86\136" +
    "\uff86\137\uff86\141\uff86\144\uff86\145\uff86\151\uff86\155\uff86" +
    "\160\uff86\162\uff86\163\uff86\164\uff86\170\uff86\171\uff86\201" +
    "\uff86\203\uff86\206\uff86\207\uff86\210\uff86\211\uff86\212\uff86" +
    "\216\uff86\217\uff86\220\uff86\222\uff86\225\uff86\227\uff86\230" +
    "\uff86\001\002\000\160\005\uff91\051\uff91\052\uff91\053\uff91" +
    "\054\uff91\055\uff91\056\uff91\062\uff91\066\uff91\070\uff91\075" +
    "\uff91\100\uff91\101\uff91\106\uff91\107\uff91\112\uff91\114\uff91" +
    "\115\uff91\116\uff91\117\uff91\122\uff91\125\uff91\126\uff91\127" +
    "\uff91\131\uff91\132\uff91\133\uff91\135\uff91\136\uff91\137\uff91" +
    "\141\uff91\144\uff91\145\uff91\151\uff91\155\uff91\160\uff91\162" +
    "\uff91\163\uff91\164\uff91\170\uff91\171\uff91\201\uff91\203\uff91" +
    "\206\uff91\207\uff91\210\uff91\211\uff91\212\uff91\216\uff91\217" +
    "\uff91\220\uff91\222\uff91\225\uff91\227\uff91\230\uff91\001\002" +
    "\000\160\005\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\062\uff8a\066\uff8a\070\uff8a\075\uff8a\100\uff8a" +
    "\101\uff8a\106\uff8a\107\uff8a\112\uff8a\114\uff8a\115\uff8a\116" +
    "\uff8a\117\uff8a\122\uff8a\125\uff8a\126\uff8a\127\uff8a\131\uff8a" +
    "\132\uff8a\133\uff8a\135\uff8a\136\uff8a\137\uff8a\141\uff8a\144" +
    "\uff8a\145\uff8a\151\uff8a\155\uff8a\160\uff8a\162\uff8a\163\uff8a" +
    "\164\uff8a\170\uff8a\171\uff8a\201\uff8a\203\uff8a\206\uff8a\207" +
    "\uff8a\210\uff8a\211\uff8a\212\uff8a\216\uff8a\217\uff8a\220\uff8a" +
    "\222\uff8a\225\uff8a\227\uff8a\230\uff8a\001\002\000\160\005" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\062\uff7f\066\uff7f\070\uff7f\075\uff7f\100\uff7f\101\uff7f\106" +
    "\uff7f\107\uff7f\112\uff7f\114\uff7f\115\uff7f\116\uff7f\117\uff7f" +
    "\122\uff7f\125\uff7f\126\uff7f\127\uff7f\131\uff7f\132\uff7f\133" +
    "\uff7f\135\uff7f\136\uff7f\137\uff7f\141\uff7f\144\uff7f\145\uff7f" +
    "\151\uff7f\155\uff7f\160\uff7f\162\uff7f\163\uff7f\164\uff7f\170" +
    "\uff7f\171\uff7f\201\uff7f\203\uff7f\206\uff7f\207\uff7f\210\uff7f" +
    "\211\uff7f\212\uff7f\216\uff7f\217\uff7f\220\uff7f\222\uff7f\225" +
    "\uff7f\227\uff7f\230\uff7f\001\002\000\160\005\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\062\uffa0\066" +
    "\uffa0\070\uffa0\075\uffa0\100\uffa0\101\uffa0\106\uffa0\107\uffa0" +
    "\112\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\122\uffa0\125" +
    "\uffa0\126\uffa0\127\uffa0\131\uffa0\132\uffa0\133\uffa0\135\uffa0" +
    "\136\uffa0\137\uffa0\141\uffa0\144\uffa0\145\uffa0\151\uffa0\155" +
    "\uffa0\160\uffa0\162\uffa0\163\uffa0\164\uffa0\170\uffa0\171\uffa0" +
    "\201\uffa0\203\uffa0\206\uffa0\207\uffa0\210\uffa0\211\uffa0\212" +
    "\uffa0\216\uffa0\217\uffa0\220\uffa0\222\uffa0\225\uffa0\227\uffa0" +
    "\230\uffa0\001\002\000\160\005\uff8b\051\uff8b\052\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\062\uff8b\066\uff8b\070\uff8b" +
    "\075\uff8b\100\uff8b\101\uff8b\106\uff8b\107\uff8b\112\uff8b\114" +
    "\uff8b\115\uff8b\116\uff8b\117\uff8b\122\uff8b\125\uff8b\126\uff8b" +
    "\127\uff8b\131\uff8b\132\uff8b\133\uff8b\135\uff8b\136\uff8b\137" +
    "\uff8b\141\uff8b\144\uff8b\145\uff8b\151\uff8b\155\uff8b\160\uff8b" +
    "\162\uff8b\163\uff8b\164\uff8b\170\uff8b\171\uff8b\201\uff8b\203" +
    "\uff8b\206\uff8b\207\uff8b\210\uff8b\211\uff8b\212\uff8b\216\uff8b" +
    "\217\uff8b\220\uff8b\222\uff8b\225\uff8b\227\uff8b\230\uff8b\001" +
    "\002\000\160\005\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\062\uff81\066\uff81\070\uff81\075\uff81\100" +
    "\uff81\101\uff81\106\uff81\107\uff81\112\uff81\114\uff81\115\uff81" +
    "\116\uff81\117\uff81\122\uff81\125\uff81\126\uff81\127\uff81\131" +
    "\uff81\132\uff81\133\uff81\135\uff81\136\uff81\137\uff81\141\uff81" +
    "\144\uff81\145\uff81\151\uff81\155\uff81\160\uff81\162\uff81\163" +
    "\uff81\164\uff81\170\uff81\171\uff81\201\uff81\203\uff81\206\uff81" +
    "\207\uff81\210\uff81\211\uff81\212\uff81\216\uff81\217\uff81\220" +
    "\uff81\222\uff81\225\uff81\227\uff81\230\uff81\001\002\000\160" +
    "\005\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056" +
    "\uff80\062\uff80\066\uff80\070\uff80\075\uff80\100\uff80\101\uff80" +
    "\106\uff80\107\uff80\112\uff80\114\uff80\115\uff80\116\uff80\117" +
    "\uff80\122\uff80\125\uff80\126\uff80\127\uff80\131\uff80\132\uff80" +
    "\133\uff80\135\uff80\136\uff80\137\uff80\141\uff80\144\uff80\145" +
    "\uff80\151\uff80\155\uff80\160\uff80\162\uff80\163\uff80\164\uff80" +
    "\170\uff80\171\uff80\201\uff80\203\uff80\206\uff80\207\uff80\210" +
    "\uff80\211\uff80\212\uff80\216\uff80\217\uff80\220\uff80\222\uff80" +
    "\225\uff80\227\uff80\230\uff80\001\002\000\160\005\uff98\051" +
    "\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\062\uff98" +
    "\066\uff98\070\uff98\075\uff98\100\uff98\101\uff98\106\uff98\107" +
    "\uff98\112\uff98\114\uff98\115\uff98\116\uff98\117\uff98\122\uff98" +
    "\125\uff98\126\uff98\127\uff98\131\uff98\132\uff98\133\uff98\135" +
    "\uff98\136\uff98\137\uff98\141\uff98\144\uff98\145\uff98\151\uff98" +
    "\155\uff98\160\uff98\162\uff98\163\uff98\164\uff98\170\uff98\171" +
    "\uff98\201\uff98\203\uff98\206\uff98\207\uff98\210\uff98\211\uff98" +
    "\212\uff98\216\uff98\217\uff98\220\uff98\222\uff98\225\uff98\227" +
    "\uff98\230\uff98\001\002\000\160\005\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\056\uffa1\062\uffa1\066\uffa1\070" +
    "\uffa1\075\uffa1\100\uffa1\101\uffa1\106\uffa1\107\uffa1\112\uffa1" +
    "\114\uffa1\115\uffa1\116\uffa1\117\uffa1\122\uffa1\125\uffa1\126" +
    "\uffa1\127\uffa1\131\uffa1\132\uffa1\133\uffa1\135\uffa1\136\uffa1" +
    "\137\uffa1\141\uffa1\144\uffa1\145\uffa1\151\uffa1\155\uffa1\160" +
    "\uffa1\162\uffa1\163\uffa1\164\uffa1\170\uffa1\171\uffa1\201\uffa1" +
    "\203\uffa1\206\uffa1\207\uffa1\210\uffa1\211\uffa1\212\uffa1\216" +
    "\uffa1\217\uffa1\220\uffa1\222\uffa1\225\uffa1\227\uffa1\230\uffa1" +
    "\001\002\000\160\005\uff7c\051\uff7c\052\uff7c\053\uff7c\054" +
    "\uff7c\055\uff7c\056\uff7c\062\uff7c\066\uff7c\070\uff7c\075\uff7c" +
    "\100\uff7c\101\uff7c\106\uff7c\107\uff7c\112\uff7c\114\uff7c\115" +
    "\uff7c\116\uff7c\117\uff7c\122\uff7c\125\uff7c\126\uff7c\127\uff7c" +
    "\131\uff7c\132\uff7c\133\uff7c\135\uff7c\136\uff7c\137\uff7c\141" +
    "\uff7c\144\uff7c\145\uff7c\151\uff7c\155\uff7c\160\uff7c\162\uff7c" +
    "\163\uff7c\164\uff7c\170\uff7c\171\uff7c\201\uff7c\203\uff7c\206" +
    "\uff7c\207\uff7c\210\uff7c\211\uff7c\212\uff7c\216\uff7c\217\uff7c" +
    "\220\uff7c\222\uff7c\225\uff7c\227\uff7c\230\uff7c\001\002\000" +
    "\160\005\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\062\uffa2\066\uffa2\070\uffa2\075\uffa2\100\uffa2\101" +
    "\uffa2\106\uffa2\107\uffa2\112\uffa2\114\uffa2\115\uffa2\116\uffa2" +
    "\117\uffa2\122\uffa2\125\uffa2\126\uffa2\127\uffa2\131\uffa2\132" +
    "\uffa2\133\uffa2\135\uffa2\136\uffa2\137\uffa2\141\uffa2\144\uffa2" +
    "\145\uffa2\151\uffa2\155\uffa2\160\uffa2\162\uffa2\163\uffa2\164" +
    "\uffa2\170\uffa2\171\uffa2\201\uffa2\203\uffa2\206\uffa2\207\uffa2" +
    "\210\uffa2\211\uffa2\212\uffa2\216\uffa2\217\uffa2\220\uffa2\222" +
    "\uffa2\225\uffa2\227\uffa2\230\uffa2\001\002\000\160\005\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\062" +
    "\uff99\066\uff99\070\uff99\075\uff99\100\uff99\101\uff99\106\uff99" +
    "\107\uff99\112\uff99\114\uff99\115\uff99\116\uff99\117\uff99\122" +
    "\uff99\125\uff99\126\uff99\127\uff99\131\uff99\132\uff99\133\uff99" +
    "\135\uff99\136\uff99\137\uff99\141\uff99\144\uff99\145\uff99\151" +
    "\uff99\155\uff99\160\uff99\162\uff99\163\uff99\164\uff99\170\uff99" +
    "\171\uff99\201\uff99\203\uff99\206\uff99\207\uff99\210\uff99\211" +
    "\uff99\212\uff99\216\uff99\217\uff99\220\uff99\222\uff99\225\uff99" +
    "\227\uff99\230\uff99\001\002\000\160\005\uff85\051\uff85\052" +
    "\uff85\053\uff85\054\uff85\055\uff85\056\uff85\062\uff85\066\uff85" +
    "\070\uff85\075\uff85\100\uff85\101\uff85\106\uff85\107\uff85\112" +
    "\uff85\114\uff85\115\uff85\116\uff85\117\uff85\122\uff85\125\uff85" +
    "\126\uff85\127\uff85\131\uff85\132\uff85\133\uff85\135\uff85\136" +
    "\uff85\137\uff85\141\uff85\144\uff85\145\uff85\151\uff85\155\uff85" +
    "\160\uff85\162\uff85\163\uff85\164\uff85\170\uff85\171\uff85\201" +
    "\uff85\203\uff85\206\uff85\207\uff85\210\uff85\211\uff85\212\uff85" +
    "\216\uff85\217\uff85\220\uff85\222\uff85\225\uff85\227\uff85\230" +
    "\uff85\001\002\000\160\005\uff7a\051\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\062\uff7a\066\uff7a\070\uff7a\075" +
    "\uff7a\100\uff7a\101\uff7a\106\uff7a\107\uff7a\112\uff7a\114\uff7a" +
    "\115\uff7a\116\uff7a\117\uff7a\122\uff7a\125\uff7a\126\uff7a\127" +
    "\uff7a\131\uff7a\132\uff7a\133\uff7a\135\uff7a\136\uff7a\137\uff7a" +
    "\141\uff7a\144\uff7a\145\uff7a\151\uff7a\155\uff7a\160\uff7a\162" +
    "\uff7a\163\uff7a\164\uff7a\170\uff7a\171\uff7a\201\uff7a\203\uff7a" +
    "\206\uff7a\207\uff7a\210\uff7a\211\uff7a\212\uff7a\216\uff7a\217" +
    "\uff7a\220\uff7a\222\uff7a\225\uff7a\227\uff7a\230\uff7a\001\002" +
    "\000\160\005\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\062\uff82\066\uff82\070\uff82\075\uff82\100\uff82" +
    "\101\uff82\106\uff82\107\uff82\112\uff82\114\uff82\115\uff82\116" +
    "\uff82\117\uff82\122\uff82\125\uff82\126\uff82\127\uff82\131\uff82" +
    "\132\uff82\133\uff82\135\uff82\136\uff82\137\uff82\141\uff82\144" +
    "\uff82\145\uff82\151\uff82\155\uff82\160\uff82\162\uff82\163\uff82" +
    "\164\uff82\170\uff82\171\uff82\201\uff82\203\uff82\206\uff82\207" +
    "\uff82\210\uff82\211\uff82\212\uff82\216\uff82\217\uff82\220\uff82" +
    "\222\uff82\225\uff82\227\uff82\230\uff82\001\002\000\160\005" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\062\uff8c\066\uff8c\070\uff8c\075\uff8c\100\uff8c\101\uff8c\106" +
    "\uff8c\107\uff8c\112\uff8c\114\uff8c\115\uff8c\116\uff8c\117\uff8c" +
    "\122\uff8c\125\uff8c\126\uff8c\127\uff8c\131\uff8c\132\uff8c\133" +
    "\uff8c\135\uff8c\136\uff8c\137\uff8c\141\uff8c\144\uff8c\145\uff8c" +
    "\151\uff8c\155\uff8c\160\uff8c\162\uff8c\163\uff8c\164\uff8c\170" +
    "\uff8c\171\uff8c\201\uff8c\203\uff8c\206\uff8c\207\uff8c\210\uff8c" +
    "\211\uff8c\212\uff8c\216\uff8c\217\uff8c\220\uff8c\222\uff8c\225" +
    "\uff8c\227\uff8c\230\uff8c\001\002\000\160\005\uff92\051\uff92" +
    "\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\062\uff92\066" +
    "\uff92\070\uff92\075\uff92\100\uff92\101\uff92\106\uff92\107\uff92" +
    "\112\uff92\114\uff92\115\uff92\116\uff92\117\uff92\122\uff92\125" +
    "\uff92\126\uff92\127\uff92\131\uff92\132\uff92\133\uff92\135\uff92" +
    "\136\uff92\137\uff92\141\uff92\144\uff92\145\uff92\151\uff92\155" +
    "\uff92\160\uff92\162\uff92\163\uff92\164\uff92\170\uff92\171\uff92" +
    "\201\uff92\203\uff92\206\uff92\207\uff92\210\uff92\211\uff92\212" +
    "\uff92\216\uff92\217\uff92\220\uff92\222\uff92\225\uff92\227\uff92" +
    "\230\uff92\001\002\000\010\005\014\227\016\230\015\001" +
    "\002\000\160\005\uff79\051\uff79\052\uff79\053\uff79\054\uff79" +
    "\055\uff79\056\uff79\062\uff79\066\uff79\070\uff79\075\uff79\100" +
    "\uff79\101\uff79\106\uff79\107\uff79\112\uff79\114\uff79\115\uff79" +
    "\116\uff79\117\uff79\122\uff79\125\uff79\126\uff79\127\uff79\131" +
    "\uff79\132\uff79\133\uff79\135\uff79\136\uff79\137\uff79\141\uff79" +
    "\144\uff79\145\uff79\151\uff79\155\uff79\160\uff79\162\uff79\163" +
    "\uff79\164\uff79\170\uff79\171\uff79\201\uff79\203\uff79\206\uff79" +
    "\207\uff79\210\uff79\211\uff79\212\uff79\216\uff79\217\uff79\220" +
    "\uff79\222\uff79\225\uff79\227\uff79\230\uff79\001\002\000\006" +
    "\013\070\225\066\001\002\000\004\010\u010d\001\002\000" +
    "\010\005\014\227\016\230\015\001\002\000\006\010\u010f" +
    "\011\u0110\001\002\000\014\005\014\173\u0112\174\u0111\227" +
    "\016\230\015\001\002\000\036\010\uffde\011\uffde\065\uffde" +
    "\111\uffde\120\uffde\124\uffde\134\uffde\143\uffde\150\uffde\204" +
    "\uffde\213\uffde\214\uffde\223\uffde\224\uffde\001\002\000\004" +
    "\012\u011b\001\002\000\004\012\u0115\001\002\000\004\011" +
    "\u0114\001\002\000\036\010\uffdf\011\uffdf\065\uffdf\111\uffdf" +
    "\120\uffdf\124\uffdf\134\uffdf\143\uffdf\150\uffdf\204\uffdf\213" +
    "\uffdf\214\uffdf\223\uffdf\224\uffdf\001\002\000\030\005\014" +
    "\024\151\025\150\027\146\031\145\040\144\041\142\042" +
    "\143\050\153\227\016\230\015\001\002\000\006\010\u0117" +
    "\011\u0118\001\002\000\010\005\014\227\016\230\015\001" +
    "\002\000\036\010\uffe0\011\uffe0\065\uffe0\111\uffe0\120\uffe0" +
    "\124\uffe0\134\uffe0\143\uffe0\150\uffe0\204\uffe0\213\uffe0\214" +
    "\uffe0\223\uffe0\224\uffe0\001\002\000\004\011\u011a\001\002" +
    "\000\036\010\uffe1\011\uffe1\065\uffe1\111\uffe1\120\uffe1\124" +
    "\uffe1\134\uffe1\143\uffe1\150\uffe1\204\uffe1\213\uffe1\214\uffe1" +
    "\223\uffe1\224\uffe1\001\002\000\030\005\014\024\151\025" +
    "\150\027\146\031\145\040\144\041\142\042\143\050\153" +
    "\227\016\230\015\001\002\000\006\010\u011d\011\u011e\001" +
    "\002\000\012\005\014\173\u011f\227\016\230\015\001\002" +
    "\000\036\010\uffe2\011\uffe2\065\uffe2\111\uffe2\120\uffe2\124" +
    "\uffe2\134\uffe2\143\uffe2\150\uffe2\204\uffe2\213\uffe2\214\uffe2" +
    "\223\uffe2\224\uffe2\001\002\000\004\012\u0122\001\002\000" +
    "\004\011\u0121\001\002\000\036\010\uffe3\011\uffe3\065\uffe3" +
    "\111\uffe3\120\uffe3\124\uffe3\134\uffe3\143\uffe3\150\uffe3\204" +
    "\uffe3\213\uffe3\214\uffe3\223\uffe3\224\uffe3\001\002\000\030" +
    "\005\014\024\151\025\150\027\146\031\145\040\144\041" +
    "\142\042\143\050\153\227\016\230\015\001\002\000\006" +
    "\010\u0124\011\u0125\001\002\000\010\005\014\227\016\230" +
    "\015\001\002\000\036\010\uffe4\011\uffe4\065\uffe4\111\uffe4" +
    "\120\uffe4\124\uffe4\134\uffe4\143\uffe4\150\uffe4\204\uffe4\213" +
    "\uffe4\214\uffe4\223\uffe4\224\uffe4\001\002\000\004\011\u0127" +
    "\001\002\000\036\010\uffe5\011\uffe5\065\uffe5\111\uffe5\120" +
    "\uffe5\124\uffe5\134\uffe5\143\uffe5\150\uffe5\204\uffe5\213\uffe5" +
    "\214\uffe5\223\uffe5\224\uffe5\001\002\000\006\013\240\225" +
    "\237\001\002\000\004\010\u012a\001\002\000\010\005\014" +
    "\227\016\230\015\001\002\000\004\010\u012c\001\002\000" +
    "\004\225\u012d\001\002\000\004\011\u012e\001\002\000\050" +
    "\010\ufff1\011\ufff1\065\ufff1\077\ufff1\111\ufff1\120\ufff1\121" +
    "\ufff1\124\ufff1\134\ufff1\143\ufff1\146\ufff1\147\ufff1\150\ufff1" +
    "\157\ufff1\204\ufff1\213\ufff1\214\ufff1\223\ufff1\224\ufff1\001" +
    "\002\000\036\010\ufff7\011\ufff7\065\ufff7\111\ufff7\120\ufff7" +
    "\124\ufff7\134\ufff7\143\ufff7\150\ufff7\204\ufff7\213\ufff7\214" +
    "\ufff7\223\ufff7\224\ufff7\001\002\000\036\010\uff5a\011\uff5a" +
    "\065\uff5a\111\uff5a\120\uff5a\124\uff5a\134\uff5a\143\uff5a\150" +
    "\uff5a\204\uff5a\213\uff5a\214\uff5a\223\uff5a\224\uff5a\001\002" +
    "\000\036\010\uff5d\011\uff5d\065\uff5d\111\uff5d\120\uff5d\124" +
    "\uff5d\134\uff5d\143\uff5d\150\uff5d\204\uff5d\213\uff5d\214\uff5d" +
    "\223\uff5d\224\uff5d\001\002\000\036\010\uff5c\011\uff5c\065" +
    "\uff5c\111\uff5c\120\uff5c\124\uff5c\134\uff5c\143\uff5c\150\uff5c" +
    "\204\uff5c\213\uff5c\214\uff5c\223\uff5c\224\uff5c\001\002\000" +
    "\036\010\uff5e\011\uff5e\065\uff5e\111\uff5e\120\uff5e\124\uff5e" +
    "\134\uff5e\143\uff5e\150\uff5e\204\uff5e\213\uff5e\214\uff5e\223" +
    "\uff5e\224\uff5e\001\002\000\036\010\uff5b\011\uff5b\065\uff5b" +
    "\111\uff5b\120\uff5b\124\uff5b\134\uff5b\143\uff5b\150\uff5b\204" +
    "\uff5b\213\uff5b\214\uff5b\223\uff5b\224\uff5b\001\002\000\006" +
    "\013\200\225\176\001\002\000\004\010\u0137\001\002\000" +
    "\010\005\014\227\016\230\015\001\002\000\004\010\u0139" +
    "\001\002\000\004\177\u013a\001\002\000\004\012\u013b\001" +
    "\002\000\022\024\151\025\150\027\146\031\145\040\144" +
    "\041\142\042\143\050\153\001\002\000\010\011\u013d\156" +
    "\160\200\161\001\002\000\036\010\uffd7\011\uffd7\065\uffd7" +
    "\111\uffd7\120\uffd7\124\uffd7\134\uffd7\143\uffd7\150\uffd7\204" +
    "\uffd7\213\uffd7\214\uffd7\223\uffd7\224\uffd7\001\002\000\006" +
    "\013\240\225\237\001\002\000\004\010\u0140\001\002\000" +
    "\010\005\014\227\016\230\015\001\002\000\004\010\u0142" +
    "\001\002\000\004\013\u0143\001\002\000\032\005\014\014" +
    "\uffc6\024\151\025\150\027\146\031\145\040\144\041\142" +
    "\042\143\050\153\227\016\230\015\001\002\000\004\014" +
    "\u0145\001\002\000\004\011\u0146\001\002\000\050\010\uffee" +
    "\011\uffee\065\uffee\077\uffee\111\uffee\120\uffee\121\uffee\124" +
    "\uffee\134\uffee\143\uffee\146\uffee\147\uffee\150\uffee\157\uffee" +
    "\204\uffee\213\uffee\214\uffee\223\uffee\224\uffee\001\002\000" +
    "\006\013\240\225\237\001\002\000\004\010\u0149\001\002" +
    "\000\010\005\014\227\016\230\015\001\002\000\004\010" +
    "\u014b\001\002\000\006\173\u014c\174\u014d\001\002\000\004" +
    "\012\u0155\001\002\000\004\012\u014e\001\002\000\022\024" +
    "\151\025\150\027\146\031\145\040\144\041\142\042\143" +
    "\050\153\001\002\000\010\010\u0150\156\160\200\161\001" +
    "\002\000\004\173\u0151\001\002\000\004\012\u0152\001\002" +
    "\000\022\024\151\025\150\027\146\031\145\040\144\041" +
    "\142\042\143\050\153\001\002\000\010\011\u0154\156\160" +
    "\200\161\001\002\000\050\010\ufff0\011\ufff0\065\ufff0\077" +
    "\ufff0\111\ufff0\120\ufff0\121\ufff0\124\ufff0\134\ufff0\143\ufff0" +
    "\146\ufff0\147\ufff0\150\ufff0\157\ufff0\204\ufff0\213\ufff0\214" +
    "\ufff0\223\ufff0\224\ufff0\001\002\000\022\024\151\025\150" +
    "\027\146\031\145\040\144\041\142\042\143\050\153\001" +
    "\002\000\010\011\u0157\156\160\200\161\001\002\000\050" +
    "\010\uffef\011\uffef\065\uffef\077\uffef\111\uffef\120\uffef\121" +
    "\uffef\124\uffef\134\uffef\143\uffef\146\uffef\147\uffef\150\uffef" +
    "\157\uffef\204\uffef\213\uffef\214\uffef\223\uffef\224\uffef\001" +
    "\002\000\006\013\200\225\176\001\002\000\004\010\u015a" +
    "\001\002\000\004\013\u015b\001\002\000\014\005\014\014" +
    "\uffaf\226\u015e\227\016\230\015\001\002\000\014\016\u016a" +
    "\017\u016e\071\u016b\103\u016d\105\u016c\001\002\000\004\014" +
    "\u0168\001\002\000\004\017\u0162\001\002\000\006\010\u0160" +
    "\014\uffae\001\002\000\014\005\014\014\uffaf\226\u015e\227" +
    "\016\230\015\001\002\000\004\014\uffad\001\002\000\010" +
    "\005\014\227\016\230\015\001\002\000\004\017\u0164\001" +
    "\002\000\004\226\u0165\001\002\000\004\123\u0166\001\002" +
    "\000\010\005\014\227\016\230\015\001\002\000\006\010" +
    "\uffb0\014\uffb0\001\002\000\004\011\u0169\001\002\000\036" +
    "\010\uffd6\011\uffd6\065\uffd6\111\uffd6\120\uffd6\124\uffd6\134" +
    "\uffd6\143\uffd6\150\uffd6\204\uffd6\213\uffd6\214\uffd6\223\uffd6" +
    "\224\uffd6\001\002\000\004\226\u0172\001\002\000\006\010" +
    "\uffb3\014\uffb3\001\002\000\006\010\uffb5\014\uffb5\001\002" +
    "\000\006\010\uffb4\014\uffb4\001\002\000\004\226\u016f\001" +
    "\002\000\004\123\u0170\001\002\000\010\005\014\227\016" +
    "\230\015\001\002\000\006\010\uffb1\014\uffb1\001\002\000" +
    "\004\123\u0173\001\002\000\010\005\014\227\016\230\015" +
    "\001\002\000\006\010\uffb2\014\uffb2\001\002\000\006\013" +
    "\070\225\066\001\002\000\004\010\u0177\001\002\000\010" +
    "\005\014\227\016\230\015\001\002\000\006\010\u0179\011" +
    "\u017a\001\002\000\006\173\u017c\174\u017b\001\002\000\036" +
    "\010\uffeb\011\uffeb\065\uffeb\111\uffeb\120\uffeb\124\uffeb\134" +
    "\uffeb\143\uffeb\150\uffeb\204\uffeb\213\uffeb\214\uffeb\223\uffeb" +
    "\224\uffeb\001\002\000\004\012\u0180\001\002\000\004\012" +
    "\u017d\001\002\000\022\024\151\025\150\027\146\031\145" +
    "\040\144\041\142\042\143\050\153\001\002\000\010\011" +
    "\u017f\156\160\200\161\001\002\000\036\010\uffea\011\uffea" +
    "\065\uffea\111\uffea\120\uffea\124\uffea\134\uffea\143\uffea\150" +
    "\uffea\204\uffea\213\uffea\214\uffea\223\uffea\224\uffea\001\002" +
    "\000\022\024\151\025\150\027\146\031\145\040\144\041" +
    "\142\042\143\050\153\001\002\000\010\010\u0182\156\160" +
    "\200\161\001\002\000\004\173\u0183\001\002\000\004\012" +
    "\u0184\001\002\000\022\024\151\025\150\027\146\031\145" +
    "\040\144\041\142\042\143\050\153\001\002\000\010\011" +
    "\u0186\156\160\200\161\001\002\000\036\010\uffe9\011\uffe9" +
    "\065\uffe9\111\uffe9\120\uffe9\124\uffe9\134\uffe9\143\uffe9\150" +
    "\uffe9\204\uffe9\213\uffe9\214\uffe9\223\uffe9\224\uffe9\001\002" +
    "\000\004\005\u0188\001\002\000\004\230\u0189\001\002\000" +
    "\004\006\u018a\001\002\000\010\002\uffff\004\uffff\035\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0188\000\006\002\004\004\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\050\006\035\007\032\010\031\012\040\013" +
    "\052\014\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\061\001\001\000\002\001\001\000" +
    "\004\011\056\001\001\000\004\012\060\001\001\000\004" +
    "\012\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\050\006\035" +
    "\007\032\010\031\012\040\013\052\014\063\001\001\000" +
    "\002\001\001\000\004\022\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\070\001\001\000\004\024" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\153" +
    "\016\146\017\154\035\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\161\001\001\000\002\001\001" +
    "\000\004\015\163\001\001\000\002\001\001\000\012\015" +
    "\153\016\146\017\165\035\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\200\001\001\000\004\024\073\001\001\000\002" +
    "\001\001\000\004\035\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\206\001\001\000\002\001\001" +
    "\000\004\035\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\216\001\001\000\002\001\001\000\004\035" +
    "\220\001\001\000\002\001\001\000\004\035\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\230" +
    "\001\001\000\004\024\073\001\001\000\002\001\001\000" +
    "\004\035\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\240\001\001\000\002\001\001\000\004\025" +
    "\246\001\001\000\002\001\001\000\004\035\242\001\001" +
    "\000\002\001\001\000\004\035\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\073\001\001\000\002" +
    "\001\001\000\004\021\251\001\001\000\002\001\001\000" +
    "\004\035\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\321\001\001\000\002" +
    "\001\001\000\006\030\364\035\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0109\001\001\000\002" +
    "\001\001\000\004\022\u010b\001\001\000\002\001\001\000" +
    "\004\035\u010d\001\001\000\002\001\001\000\004\035\u0112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\153" +
    "\016\u0115\035\151\001\001\000\002\001\001\000\004\035" +
    "\u0118\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\153\016\u011b\035\151\001\001\000" +
    "\002\001\001\000\004\035\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\153\016\u0122\035\151\001\001\000\002\001\001" +
    "\000\004\035\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u0128\001\001\000\002" +
    "\001\001\000\004\035\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0135" +
    "\001\001\000\002\001\001\000\004\035\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u013e\001\001\000\002\001\001\000\004\035\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\153\016\146\017\u0143\035\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0147\001" +
    "\001\000\002\001\001\000\004\035\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u014e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\u015e" +
    "\027\u015c\035\u015b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\u015e" +
    "\027\u0160\035\u015b\001\001\000\002\001\001\000\004\035" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u0166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0170\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0173\001\001\000" +
    "\002\001\001\000\004\022\u0175\001\001\000\002\001\001" +
    "\000\004\035\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u017d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0180\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public net.lemonmodel.patterns.parser.Absyn.Statements pStatements() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (net.lemonmodel.patterns.parser.Absyn.Statements) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // URI ::= FullURI 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURI(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // URI ::= _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName2(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // URI ::= _IDENT_ _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Register ::= _SYMB_143 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVulgarRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Register ::= _SYMB_136 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETechnicalRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Register ::= _SYMB_135 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETabooRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Register ::= _SYMB_128 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlangRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Register ::= _SYMB_100 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENeutralRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Register ::= _SYMB_95 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIronicRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Register ::= _SYMB_88 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInHouseRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Register ::= _SYMB_80 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFormalRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Register ::= _SYMB_76 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFacetiousRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Register ::= _SYMB_69 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDialectRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Register ::= _SYMB_49 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBenchLevelRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Gender ::= _SYMB_107 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOtherGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Gender ::= _SYMB_59 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommonGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Gender ::= _SYMB_99 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENeutGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Gender ::= _SYMB_77 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFemGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Gender ::= _SYMB_98 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EMascGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // POSTag ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyPOS(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // POSTag ::= _SYMB_141 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // POSTag ::= _SYMB_129 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlashPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // POSTag ::= _SYMB_126 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESemiColonPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // POSTag ::= _SYMB_122 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPunctuationPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // POSTag ::= _SYMB_118 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPronounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // POSTag ::= _SYMB_115 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // POSTag ::= _SYMB_114 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // POSTag ::= _SYMB_113 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPointPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // POSTag ::= _SYMB_109 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // POSTag ::= _SYMB_104 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENumeralPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // POSTag ::= _SYMB_103 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // POSTag ::= _SYMB_94 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInterjectionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // POSTag ::= _SYMB_68 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDeterminerPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // POSTag ::= _SYMB_64 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // POSTag ::= _SYMB_62 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConjunctionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // POSTag ::= _SYMB_58 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // POSTag ::= _SYMB_56 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EColonPOSPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // POSTag ::= _SYMB_54 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECircumpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // POSTag ::= _SYMB_51 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBulletPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // POSTag ::= _SYMB_47 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // POSTag ::= _SYMB_45 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdverbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // POSTag ::= _SYMB_44 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // POSTag ::= _SYMB_43 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjectivePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ListCategory ::= ListCategory Category 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_1 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Category p_2 = (net.lemonmodel.patterns.parser.Absyn.Category)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ListCategory ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListCategory(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Category ::= URI _SYMB_12 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyCat(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Category ::= _SYMB_108 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticiple(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Category ::= _SYMB_91 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInfinitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Category ::= _SYMB_83 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGerundive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Category ::= _SYMB_61 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConditional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Category ::= _SYMB_131 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubjunctive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Category ::= _SYMB_89 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndicative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Category ::= _SYMB_86 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Category ::= _SYMB_87 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperfect(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Category ::= _SYMB_139 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EThirdPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Category ::= _SYMB_125 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESecondPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Category ::= _SYMB_78 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFirstPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Category ::= _SYMB_81 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFuture(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Category ::= _SYMB_111 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Category ::= _SYMB_116 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPresent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Category ::= _SYMB_134 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperlative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Category ::= _SYMB_60 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EComparative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Category ::= _SYMB_142 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVocative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Category ::= _SYMB_140 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETranslative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Category ::= _SYMB_138 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETerminative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Category ::= _SYMB_133 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperessive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Category ::= _SYMB_132 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESublative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Category ::= _SYMB_130 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESociative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Category ::= _SYMB_117 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EProlative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Category ::= _SYMB_110 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPartitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Category ::= _SYMB_105 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOblique(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Category ::= _SYMB_101 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENominative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Category ::= _SYMB_97 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELocative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Category ::= _SYMB_96 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Category ::= _SYMB_93 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstrumental(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Category ::= _SYMB_90 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInessive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Category ::= _SYMB_85 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIllative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Category ::= _SYMB_82 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGenitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Category ::= _SYMB_75 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEssive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Category ::= _SYMB_74 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EErgative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Category ::= _SYMB_73 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEquative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Category ::= _SYMB_72 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EElative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Category ::= _SYMB_67 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDelative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Category ::= _SYMB_66 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Category ::= _SYMB_57 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EComitative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Category ::= _SYMB_52 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECausative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Category ::= _SYMB_50 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBenefactive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Category ::= _SYMB_46 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAllative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Category ::= _SYMB_42 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAditive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Category ::= _SYMB_41 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdessive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Category ::= _SYMB_40 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAccusative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Category ::= _SYMB_39 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAbsolutive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Category ::= _SYMB_38 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAblative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Category ::= _SYMB_37 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAbessive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Category ::= _SYMB_112 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPlural(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Category ::= _SYMB_70 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Category ::= _SYMB_127 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESingular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListScalarMembership ::= ScalarMembership _SYMB_4 ListScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_3 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListScalarMembership ::= ScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListScalarMembership ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ScalarMembership ::= _DOUBLE_ _SYMB_11 URI _SYMB_11 _DOUBLE_ _SYMB_79 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_5 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.BoundedScalarMembership(p_1,p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ScalarMembership ::= URI _SYMB_11 _DOUBLE_ _SYMB_79 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.LessThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ScalarMembership ::= URI _SYMB_10 _DOUBLE_ _SYMB_79 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.GreaterThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ScalarMembership ::= URI _SYMB_53 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CentralScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ScalarMembership ::= URI _SYMB_63 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ContravariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ScalarMembership ::= URI _SYMB_65 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CovariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListPOSTaggedWord ::= ListPOSTaggedWord POSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListPOSTaggedWord ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // POSTaggedWord ::= _STRING_ _SYMB_9 _STRING_ _SYMB_9 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_5 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELemmaPOSTaggedWord(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // POSTaggedWord ::= _STRING_ _SYMB_9 _STRING_ _SYMB_9 POSTag _SYMB_6 _SYMB_84 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_5 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELemmaPOSTaggedHeadWord(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // POSTaggedWord ::= _STRING_ _SYMB_9 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // POSTaggedWord ::= _STRING_ _SYMB_9 POSTag _SYMB_6 _SYMB_84 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedHeadWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PNP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PNP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListOntologyFrameElement ::= OntologyFrameElement _SYMB_4 ListOntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_3 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListOntologyFrameElement ::= OntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListOntologyFrameElement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OntologyFrameElement ::= Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArgAsOFE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OntologyFrameElement ::= URI _SYMB_48 Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_3 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURIAsSynArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Arg ::= _SYMB_28 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPossessiveAdjunct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Arg ::= _SYMB_29 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Arg ::= _SYMB_30 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arg ::= _SYMB_17 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeSubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Arg ::= _SYMB_16 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Arg ::= _SYMB_21 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Arg ::= _SYMB_19 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Arg ::= _SYMB_36 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arg ::= Arg _SYMB_124 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERestrictedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arg ::= Arg _SYMB_106 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOptionalArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListPatternType ::= PatternType _SYMB_4 ListPatternType 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.PatternType p_1 = (net.lemonmodel.patterns.parser.Absyn.PatternType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPatternType p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPatternType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListPatternType ::= PatternType 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.PatternType p_1 = (net.lemonmodel.patterns.parser.Absyn.PatternType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPatternType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListPatternType ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPatternType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AdjectivePattern ::= _SYMB_34 _SYMB_3 AP _SYMB_4 _SYMB_7 ListScalarMembership _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_6 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EScalarAdjective(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AdjectivePattern ::= _SYMB_31 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _SYMB_123 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalAdjective(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AdjectivePattern ::= _SYMB_23 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveDataPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AdjectivePattern ::= _SYMB_24 _SYMB_3 AP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveObjectPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AdjectivePattern ::= _SYMB_22 _SYMB_3 AP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VerbPattern3 ::= _SYMB_20 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEventVerb(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VerbPattern2 ::= _SYMB_92 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VerbPattern2 ::= _SYMB_71 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb8(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb7(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_119 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb6(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_119 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb5(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_120 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb4(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_120 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb3(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_120 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_119 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb2(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_120 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_119 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_15 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb1(p_3,p_5,p_9,p_13,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VerbPattern ::= VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDunnotelicEventVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VerbPattern ::= _SYMB_102 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENontelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VerbPattern ::= _SYMB_137 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VerbPattern ::= _SYMB_35 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_120 _SYMB_6 Arg _SYMB_4 _SYMB_119 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb3(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VerbPattern ::= _SYMB_35 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_119 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VerbPattern ::= _SYMB_35 _SYMB_3 VP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb1(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_55 _SYMB_6 URI _SYMB_4 _SYMB_121 _SYMB_6 URI _SYMB_4 _SYMB_119 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun2(p_3,p_7,p_11,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_55 _SYMB_6 URI _SYMB_4 _SYMB_121 _SYMB_6 URI _SYMB_4 _SYMB_120 _SYMB_6 Arg _SYMB_4 _SYMB_119 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_19 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun1(p_3,p_7,p_11,p_15,p_19); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NounPattern ::= _SYMB_32 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalMultivalentNoun(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NounPattern ::= _SYMB_33 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_119 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NounPattern ::= _SYMB_33 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_120 _SYMB_6 Arg _SYMB_4 _SYMB_119 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun1(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NounPattern ::= _SYMB_18 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDataPropertyNoun(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NounPattern ::= _SYMB_27 _SYMB_3 NP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EObjectPropertyNoun(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NounPattern ::= _SYMB_13 _SYMB_3 NP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassNoun(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NounPattern ::= _SYMB_26 _SYMB_3 PNP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.PNP p_3 = (net.lemonmodel.patterns.parser.Absyn.PNP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EName(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Pattern ::= AdjectivePattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.AdjectivePattern p_1 = (net.lemonmodel.patterns.parser.Absyn.AdjectivePattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjective(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Pattern ::= VerbPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Pattern ::= NounPattern Gender 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Gender p_2 = (net.lemonmodel.patterns.parser.Absyn.Gender)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounWithGender(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Pattern ::= NounPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENoun(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Pattern ::= Pattern _SYMB_144 ListCategory _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_3 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithForm(p_1,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PatternType ::= Pattern 
            {
              net.lemonmodel.patterns.parser.Absyn.PatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECorePattern(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternType",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PatternType ::= Pattern Register 
            {
              net.lemonmodel.patterns.parser.Absyn.PatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Register p_2 = (net.lemonmodel.patterns.parser.Absyn.Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithRegister(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternType",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStatement ::= ListStatement Statement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Statement p_2 = (net.lemonmodel.patterns.parser.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStatement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= _SYMB_25 _SYMB_3 URI _SYMB_4 _STRING_ _SYMB_4 ListPatternType _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPatternType p_7 = (net.lemonmodel.patterns.parser.Absyn.ListPatternType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELexicon(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= _SYMB_0 _IDENT_ _SYMB_1 FullURI _SYMB_2 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrefix(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Statements ::= ListStatement 
            {
              net.lemonmodel.patterns.parser.Absyn.Statements RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStatments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Statements start_val = (net.lemonmodel.patterns.parser.Absyn.Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

