
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 20 13:53:50 CEST 2014
//----------------------------------------------------

package net.lemonmodel.patterns.parser;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 20 13:53:50 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\003\000\002\006\006\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\007\010\000\002\007\010\000\002\007" +
    "\020\000\002\007\014\000\002\007\014\000\002\007\026" +
    "\000\002\007\022\000\002\010\010\000\002\010\014\000" +
    "\002\010\020\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\010\022\000\002\010\020\000\002\010" +
    "\016\000\002\010\014\000\002\010\016\000\002\010\014" +
    "\000\002\010\013\000\002\010\011\000\002\011\004\000" +
    "\002\011\004\000\002\012\014\000\002\013\010\000\002" +
    "\013\012\000\002\013\012\000\002\013\010\000\002\013" +
    "\014\000\002\013\012\000\002\014\002\000\002\014\003" +
    "\000\002\014\005\000\002\015\004\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\006\000\002\015" +
    "\006\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\002\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\005\000\002\022\003\000\002\022\005\000\002\023" +
    "\003\000\002\023\005\000\002\024\007\000\002\024\005" +
    "\000\002\024\011\000\002\024\007\000\002\025\002\000" +
    "\002\025\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\007\000\002\026\007\000\002\026" +
    "\011\000\002\027\002\000\002\027\003\000\002\027\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\005\000\002\031\002\000\002\031\004" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\005\000\002\035\004\000" +
    "\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\010\002\ufffd\004\ufffd\034\ufffd\001\002\000" +
    "\010\002\000\004\007\034\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\172\u0162\001" +
    "\002\000\010\002\ufffc\004\ufffc\034\ufffc\001\002\000\004" +
    "\007\012\001\002\000\010\005\015\172\016\173\014\001" +
    "\002\000\004\010\022\001\002\000\120\005\uff69\010\uff69" +
    "\011\uff69\014\uff69\016\uff69\017\uff69\020\uff69\050\uff69\055" +
    "\uff69\060\uff69\066\uff69\067\uff69\071\uff69\073\uff69\074\uff69" +
    "\077\uff69\103\uff69\106\uff69\107\uff69\110\uff69\112\uff69\113" +
    "\uff69\115\uff69\116\uff69\125\uff69\131\uff69\133\uff69\135\uff69" +
    "\136\uff69\142\uff69\151\uff69\152\uff69\154\uff69\157\uff69\160" +
    "\uff69\164\uff69\170\uff69\172\uff69\173\uff69\001\002\000\004" +
    "\172\021\001\002\000\004\005\017\001\002\000\004\172" +
    "\020\001\002\000\120\005\uff6b\010\uff6b\011\uff6b\014\uff6b" +
    "\016\uff6b\017\uff6b\020\uff6b\050\uff6b\055\uff6b\060\uff6b\066" +
    "\uff6b\067\uff6b\071\uff6b\073\uff6b\074\uff6b\077\uff6b\103\uff6b" +
    "\106\uff6b\107\uff6b\110\uff6b\112\uff6b\113\uff6b\115\uff6b\116" +
    "\uff6b\125\uff6b\131\uff6b\133\uff6b\135\uff6b\136\uff6b\142\uff6b" +
    "\151\uff6b\152\uff6b\154\uff6b\157\uff6b\160\uff6b\164\uff6b\170" +
    "\uff6b\172\uff6b\173\uff6b\001\002\000\120\005\uff6a\010\uff6a" +
    "\011\uff6a\014\uff6a\016\uff6a\017\uff6a\020\uff6a\050\uff6a\055" +
    "\uff6a\060\uff6a\066\uff6a\067\uff6a\071\uff6a\073\uff6a\074\uff6a" +
    "\077\uff6a\103\uff6a\106\uff6a\107\uff6a\110\uff6a\112\uff6a\113" +
    "\uff6a\115\uff6a\116\uff6a\125\uff6a\131\uff6a\133\uff6a\135\uff6a" +
    "\136\uff6a\142\uff6a\151\uff6a\152\uff6a\154\uff6a\157\uff6a\160" +
    "\uff6a\164\uff6a\170\uff6a\172\uff6a\173\uff6a\001\002\000\004" +
    "\170\023\001\002\000\004\010\024\001\002\000\044\011" +
    "\uffd6\021\041\022\040\023\036\027\034\031\050\032\047" +
    "\033\046\035\044\041\043\042\031\043\030\044\027\045" +
    "\026\046\025\126\051\163\035\001\002\000\004\007\u0150" +
    "\001\002\000\004\007\u0133\001\002\000\004\007\u0122\001" +
    "\002\000\004\007\u0119\001\002\000\004\007\u0110\001\002" +
    "\000\036\010\ufff6\011\ufff6\056\ufff6\076\ufff6\101\ufff6\105" +
    "\ufff6\114\ufff6\121\ufff6\124\ufff6\155\ufff6\161\ufff6\162\ufff6" +
    "\166\ufff6\167\ufff6\001\002\000\050\010\ufff8\011\ufff8\056" +
    "\ufff8\065\u010f\076\ufff8\101\ufff8\102\u010d\105\ufff8\114\ufff8" +
    "\121\ufff8\122\u010c\123\u010b\124\ufff8\132\u010e\155\ufff8\161" +
    "\ufff8\162\ufff8\166\ufff8\167\ufff8\001\002\000\004\007\376" +
    "\001\002\000\006\100\060\117\056\001\002\000\004\007" +
    "\327\001\002\000\036\010\ufffa\011\ufffa\056\266\076\257" +
    "\101\255\105\267\114\265\121\263\124\262\155\261\161" +
    "\256\162\260\166\271\167\270\001\002\000\004\007\205" +
    "\001\002\000\004\007\174\001\002\000\036\010\uffe8\011" +
    "\uffe8\056\uffe8\076\uffe8\101\uffe8\105\uffe8\114\uffe8\121\uffe8" +
    "\124\uffe8\155\uffe8\161\uffe8\162\uffe8\166\uffe8\167\uffe8\001" +
    "\002\000\004\007\167\001\002\000\004\007\156\001\002" +
    "\000\004\011\155\001\002\000\004\007\146\001\002\000" +
    "\004\007\137\001\002\000\004\007\063\001\002\000\006" +
    "\100\060\117\056\001\002\000\006\010\054\011\uffd5\001" +
    "\002\000\036\010\ufff5\011\ufff5\056\ufff5\076\ufff5\101\ufff5" +
    "\105\ufff5\114\ufff5\121\ufff5\124\ufff5\155\ufff5\161\ufff5\162" +
    "\ufff5\166\ufff5\167\ufff5\001\002\000\044\011\uffd6\021\041" +
    "\022\040\023\036\027\034\031\050\032\047\033\046\035" +
    "\044\041\043\042\031\043\030\044\027\045\026\046\025" +
    "\126\051\163\035\001\002\000\004\011\uffd4\001\002\000" +
    "\004\027\034\001\002\000\036\010\uffe9\011\uffe9\056\uffe9" +
    "\076\uffe9\101\uffe9\105\uffe9\114\uffe9\121\uffe9\124\uffe9\155" +
    "\uffe9\161\uffe9\162\uffe9\166\uffe9\167\uffe9\001\002\000\004" +
    "\027\034\001\002\000\036\010\uffdf\011\uffdf\056\uffdf\076" +
    "\uffdf\101\uffdf\105\uffdf\114\uffdf\121\uffdf\124\uffdf\155\uffdf" +
    "\161\uffdf\162\uffdf\166\uffdf\167\uffdf\001\002\000\036\010" +
    "\uffde\011\uffde\056\uffde\076\uffde\101\uffde\105\uffde\114\uffde" +
    "\121\uffde\124\uffde\155\uffde\161\uffde\162\uffde\166\uffde\167" +
    "\uffde\001\002\000\006\013\066\170\064\001\002\000\004" +
    "\010\uffbe\001\002\000\004\010\134\001\002\000\006\014" +
    "\uffb8\170\uffb8\001\002\000\006\014\071\170\070\001\002" +
    "\000\004\015\073\001\002\000\004\010\uffbd\001\002\000" +
    "\006\014\uffb7\170\uffb7\001\002\000\062\051\123\052\122" +
    "\053\121\054\110\057\107\061\106\063\104\064\103\070" +
    "\115\072\113\075\111\120\105\127\116\130\114\134\112" +
    "\137\101\140\100\141\077\143\076\147\124\153\120\156" +
    "\117\165\102\170\074\001\002\000\012\012\uff7c\014\uff7c" +
    "\015\127\170\uff7c\001\002\000\010\012\125\014\uffbb\170" +
    "\uffbb\001\002\000\010\012\uff81\014\uff81\170\uff81\001\002" +
    "\000\010\012\uff82\014\uff82\170\uff82\001\002\000\010\012" +
    "\uff83\014\uff83\170\uff83\001\002\000\010\012\uff84\014\uff84" +
    "\170\uff84\001\002\000\010\012\uff7d\014\uff7d\170\uff7d\001" +
    "\002\000\010\012\uff8c\014\uff8c\170\uff8c\001\002\000\010" +
    "\012\uff8d\014\uff8d\170\uff8d\001\002\000\010\012\uff88\014" +
    "\uff88\170\uff88\001\002\000\010\012\uff8e\014\uff8e\170\uff8e" +
    "\001\002\000\010\012\uff8f\014\uff8f\170\uff8f\001\002\000" +
    "\010\012\uff90\014\uff90\170\uff90\001\002\000\010\012\uff89" +
    "\014\uff89\170\uff89\001\002\000\010\012\uff85\014\uff85\170" +
    "\uff85\001\002\000\010\012\uff8a\014\uff8a\170\uff8a\001\002" +
    "\000\010\012\uff86\014\uff86\170\uff86\001\002\000\010\012" +
    "\uff8b\014\uff8b\170\uff8b\001\002\000\010\012\uff87\014\uff87" +
    "\170\uff87\001\002\000\010\012\uff7e\014\uff7e\170\uff7e\001" +
    "\002\000\010\012\uff7f\014\uff7f\170\uff7f\001\002\000\010" +
    "\012\uff91\014\uff91\170\uff91\001\002\000\010\012\uff92\014" +
    "\uff92\170\uff92\001\002\000\010\012\uff93\014\uff93\170\uff93" +
    "\001\002\000\010\012\uff80\014\uff80\170\uff80\001\002\000" +
    "\004\111\126\001\002\000\006\014\uffbc\170\uffbc\001\002" +
    "\000\062\051\123\052\122\053\121\054\110\057\107\061" +
    "\106\063\104\064\103\070\115\072\113\075\111\120\105" +
    "\127\116\130\114\134\112\137\101\140\100\141\077\143" +
    "\076\147\124\153\120\156\117\165\102\170\130\001\002" +
    "\000\010\012\uff7c\014\uff7c\170\uff7c\001\002\000\010\012" +
    "\132\014\uffb9\170\uffb9\001\002\000\004\111\133\001\002" +
    "\000\006\014\uffba\170\uffba\001\002\000\010\005\015\172" +
    "\016\173\014\001\002\000\004\011\136\001\002\000\036" +
    "\010\uffdc\011\uffdc\056\uffdc\076\uffdc\101\uffdc\105\uffdc\114" +
    "\uffdc\121\uffdc\124\uffdc\155\uffdc\161\uffdc\162\uffdc\166\uffdc" +
    "\167\uffdc\001\002\000\006\013\066\170\064\001\002\000" +
    "\004\010\141\001\002\000\010\005\015\172\016\173\014" +
    "\001\002\000\004\010\143\001\002\000\004\170\144\001" +
    "\002\000\004\011\145\001\002\000\036\010\uffda\011\uffda" +
    "\056\uffda\076\uffda\101\uffda\105\uffda\114\uffda\121\uffda\124" +
    "\uffda\155\uffda\161\uffda\162\uffda\166\uffda\167\uffda\001\002" +
    "\000\006\013\066\170\064\001\002\000\004\010\150\001" +
    "\002\000\010\005\015\172\016\173\014\001\002\000\004" +
    "\010\152\001\002\000\010\005\015\172\016\173\014\001" +
    "\002\000\004\011\154\001\002\000\036\010\uffdb\011\uffdb" +
    "\056\uffdb\076\uffdb\101\uffdb\105\uffdb\114\uffdb\121\uffdb\124" +
    "\uffdb\155\uffdb\161\uffdb\162\uffdb\166\uffdb\167\uffdb\001\002" +
    "\000\010\002\ufffe\004\ufffe\034\ufffe\001\002\000\006\013" +
    "\160\170\157\001\002\000\004\010\uffc4\001\002\000\006" +
    "\014\uffb8\170\uffb8\001\002\000\004\010\162\001\002\000" +
    "\010\005\015\172\016\173\014\001\002\000\004\011\164" +
    "\001\002\000\050\010\ufff4\011\ufff4\056\ufff4\065\ufff4\076" +
    "\ufff4\101\ufff4\102\ufff4\105\ufff4\114\ufff4\121\ufff4\122\ufff4" +
    "\123\ufff4\124\ufff4\132\ufff4\155\ufff4\161\ufff4\162\ufff4\166" +
    "\ufff4\167\ufff4\001\002\000\006\014\166\170\070\001\002" +
    "\000\004\010\uffc3\001\002\000\006\013\066\170\064\001" +
    "\002\000\004\010\171\001\002\000\010\005\015\172\016" +
    "\173\014\001\002\000\004\011\173\001\002\000\036\010" +
    "\uffd9\011\uffd9\056\uffd9\076\uffd9\101\uffd9\105\uffd9\114\uffd9" +
    "\121\uffd9\124\uffd9\155\uffd9\161\uffd9\162\uffd9\166\uffd9\167" +
    "\uffd9\001\002\000\006\013\176\170\175\001\002\000\004" +
    "\010\uffc2\001\002\000\006\014\uffb8\170\uffb8\001\002\000" +
    "\004\010\200\001\002\000\010\005\015\172\016\173\014" +
    "\001\002\000\004\011\202\001\002\000\050\010\ufff3\011" +
    "\ufff3\056\ufff3\065\ufff3\076\ufff3\101\ufff3\102\ufff3\105\ufff3" +
    "\114\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3\132\ufff3\155" +
    "\ufff3\161\ufff3\162\ufff3\166\ufff3\167\ufff3\001\002\000\006" +
    "\014\204\170\070\001\002\000\004\010\uffc1\001\002\000" +
    "\006\013\176\170\175\001\002\000\004\010\207\001\002" +
    "\000\004\062\210\001\002\000\004\012\211\001\002\000" +
    "\010\005\015\172\016\173\014\001\002\000\004\010\213" +
    "\001\002\000\004\146\214\001\002\000\004\012\215\001" +
    "\002\000\010\005\015\172\016\173\014\001\002\000\004" +
    "\010\217\001\002\000\006\144\221\145\220\001\002\000" +
    "\004\012\246\001\002\000\004\012\222\001\002\000\022" +
    "\024\231\025\230\026\226\030\227\036\225\037\224\040" +
    "\223\047\232\001\002\000\004\007\243\001\002\000\004" +
    "\007\240\001\002\000\014\010\uffca\011\uffca\014\uffca\131" +
    "\uffca\151\uffca\001\002\000\014\010\uffd0\011\uffd0\014\uffd0" +
    "\131\uffd0\151\uffd0\001\002\000\014\010\uffcf\011\uffcf\014" +
    "\uffcf\131\uffcf\151\uffcf\001\002\000\014\010\uffcd\011\uffcd" +
    "\014\uffcd\131\uffcd\151\uffcd\001\002\000\014\010\uffce\011" +
    "\uffce\014\uffce\131\uffce\151\uffce\001\002\000\014\010\uffd1" +
    "\011\uffd1\014\uffd1\131\uffd1\151\uffd1\001\002\000\010\011" +
    "\236\131\235\151\234\001\002\000\010\005\015\172\016" +
    "\173\014\001\002\000\014\010\uffd3\011\uffd3\014\uffd3\131" +
    "\uffd3\151\uffd3\001\002\000\050\010\uffee\011\uffee\056\uffee" +
    "\065\uffee\076\uffee\101\uffee\102\uffee\105\uffee\114\uffee\121" +
    "\uffee\122\uffee\123\uffee\124\uffee\132\uffee\155\uffee\161\uffee" +
    "\162\uffee\166\uffee\167\uffee\001\002\000\014\010\uffd2\011" +
    "\uffd2\014\uffd2\131\uffd2\151\uffd2\001\002\000\004\170\241" +
    "\001\002\000\004\011\242\001\002\000\014\010\uffcb\011" +
    "\uffcb\014\uffcb\131\uffcb\151\uffcb\001\002\000\004\170\244" +
    "\001\002\000\004\011\245\001\002\000\014\010\uffcc\011" +
    "\uffcc\014\uffcc\131\uffcc\151\uffcc\001\002\000\022\024\231" +
    "\025\230\026\226\030\227\036\225\037\224\040\223\047" +
    "\232\001\002\000\010\010\250\131\235\151\234\001\002" +
    "\000\004\144\251\001\002\000\004\012\252\001\002\000" +
    "\022\024\231\025\230\026\226\030\227\036\225\037\224" +
    "\040\223\047\232\001\002\000\010\011\254\131\235\151" +
    "\234\001\002\000\050\010\uffef\011\uffef\056\uffef\065\uffef" +
    "\076\uffef\101\uffef\102\uffef\105\uffef\114\uffef\121\uffef\122" +
    "\uffef\123\uffef\124\uffef\132\uffef\155\uffef\161\uffef\162\uffef" +
    "\166\uffef\167\uffef\001\002\000\006\010\uff74\011\uff74\001" +
    "\002\000\006\010\uff6e\011\uff6e\001\002\000\006\010\uff75" +
    "\011\uff75\001\002\000\006\010\uff6d\011\uff6d\001\002\000" +
    "\006\010\uff6f\011\uff6f\001\002\000\006\010\uff70\011\uff70" +
    "\001\002\000\006\010\uff71\011\uff71\001\002\000\006\010" +
    "\ufffb\011\ufffb\001\002\000\006\010\uff72\011\uff72\001\002" +
    "\000\006\010\uff76\011\uff76\001\002\000\006\010\uff73\011" +
    "\uff73\001\002\000\070\005\uff95\050\uff95\066\uff95\067\uff95" +
    "\074\uff95\077\uff95\103\uff95\106\uff95\107\uff95\110\uff95\112" +
    "\uff95\113\uff95\115\uff95\116\uff95\125\uff95\133\uff95\135\uff95" +
    "\136\uff95\142\uff95\152\uff95\154\uff95\157\uff95\160\uff95\164" +
    "\uff95\170\uff95\172\uff95\173\uff95\001\002\000\006\010\uff6c" +
    "\011\uff6c\001\002\000\070\005\015\050\274\066\317\067" +
    "\315\074\313\077\310\103\277\106\275\107\273\110\324" +
    "\112\307\113\306\115\305\116\304\125\320\133\312\135" +
    "\311\136\301\142\300\152\323\154\322\157\321\160\316" +
    "\164\302\170\276\172\016\173\014\001\002\000\070\005" +
    "\uffa8\050\uffa8\066\uffa8\067\uffa8\074\uffa8\077\uffa8\103\uffa8" +
    "\106\uffa8\107\uffa8\110\uffa8\112\uffa8\113\uffa8\115\uffa8\116" +
    "\uffa8\125\uffa8\133\uffa8\135\uffa8\136\uffa8\142\uffa8\152\uffa8" +
    "\154\uffa8\157\uffa8\160\uffa8\164\uffa8\170\uffa8\172\uffa8\173" +
    "\uffa8\001\002\000\070\005\uffa9\050\uffa9\066\uffa9\067\uffa9" +
    "\074\uffa9\077\uffa9\103\uffa9\106\uffa9\107\uffa9\110\uffa9\112" +
    "\uffa9\113\uffa9\115\uffa9\116\uffa9\125\uffa9\133\uffa9\135\uffa9" +
    "\136\uffa9\142\uffa9\152\uffa9\154\uffa9\157\uffa9\160\uffa9\164" +
    "\uffa9\170\uffa9\172\uffa9\173\uffa9\001\002\000\070\005\uffa2" +
    "\050\uffa2\066\uffa2\067\uffa2\074\uffa2\077\uffa2\103\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\112\uffa2\113\uffa2\115\uffa2\116\uffa2" +
    "\125\uffa2\133\uffa2\135\uffa2\136\uffa2\142\uffa2\152\uffa2\154" +
    "\uffa2\157\uffa2\160\uffa2\164\uffa2\170\uffa2\172\uffa2\173\uffa2" +
    "\001\002\000\036\010\ufff9\011\ufff9\056\ufff9\076\ufff9\101" +
    "\ufff9\105\ufff9\114\ufff9\121\ufff9\124\ufff9\155\ufff9\161\ufff9" +
    "\162\ufff9\166\ufff9\167\ufff9\001\002\000\070\005\uffa1\050" +
    "\uffa1\066\uffa1\067\uffa1\074\uffa1\077\uffa1\103\uffa1\106\uffa1" +
    "\107\uffa1\110\uffa1\112\uffa1\113\uffa1\115\uffa1\116\uffa1\125" +
    "\uffa1\133\uffa1\135\uffa1\136\uffa1\142\uffa1\152\uffa1\154\uffa1" +
    "\157\uffa1\160\uffa1\164\uffa1\170\uffa1\172\uffa1\173\uffa1\001" +
    "\002\000\070\005\uffa4\050\uffa4\066\uffa4\067\uffa4\074\uffa4" +
    "\077\uffa4\103\uffa4\106\uffa4\107\uffa4\110\uffa4\112\uffa4\113" +
    "\uffa4\115\uffa4\116\uffa4\125\uffa4\133\uffa4\135\uffa4\136\uffa4" +
    "\142\uffa4\152\uffa4\154\uffa4\157\uffa4\160\uffa4\164\uffa4\170" +
    "\uffa4\172\uffa4\173\uffa4\001\002\000\070\005\uffab\050\uffab" +
    "\066\uffab\067\uffab\074\uffab\077\uffab\103\uffab\106\uffab\107" +
    "\uffab\110\uffab\112\uffab\113\uffab\115\uffab\116\uffab\125\uffab" +
    "\133\uffab\135\uffab\136\uffab\142\uffab\152\uffab\154\uffab\157" +
    "\uffab\160\uffab\164\uffab\170\uffab\172\uffab\173\uffab\001\002" +
    "\000\070\005\uff9f\050\uff9f\066\uff9f\067\uff9f\074\uff9f\077" +
    "\uff9f\103\uff9f\106\uff9f\107\uff9f\110\uff9f\112\uff9f\113\uff9f" +
    "\115\uff9f\116\uff9f\125\uff9f\133\uff9f\135\uff9f\136\uff9f\142" +
    "\uff9f\152\uff9f\154\uff9f\157\uff9f\160\uff9f\164\uff9f\170\uff9f" +
    "\172\uff9f\173\uff9f\001\002\000\004\020\325\001\002\000" +
    "\070\005\uff98\050\uff98\066\uff98\067\uff98\074\uff98\077\uff98" +
    "\103\uff98\106\uff98\107\uff98\110\uff98\112\uff98\113\uff98\115" +
    "\uff98\116\uff98\125\uff98\133\uff98\135\uff98\136\uff98\142\uff98" +
    "\152\uff98\154\uff98\157\uff98\160\uff98\164\uff98\170\uff98\172" +
    "\uff98\173\uff98\001\002\000\070\005\uff9c\050\uff9c\066\uff9c" +
    "\067\uff9c\074\uff9c\077\uff9c\103\uff9c\106\uff9c\107\uff9c\110" +
    "\uff9c\112\uff9c\113\uff9c\115\uff9c\116\uff9c\125\uff9c\133\uff9c" +
    "\135\uff9c\136\uff9c\142\uff9c\152\uff9c\154\uff9c\157\uff9c\160" +
    "\uff9c\164\uff9c\170\uff9c\172\uff9c\173\uff9c\001\002\000\070" +
    "\005\uff9e\050\uff9e\066\uff9e\067\uff9e\074\uff9e\077\uff9e\103" +
    "\uff9e\106\uff9e\107\uff9e\110\uff9e\112\uff9e\113\uff9e\115\uff9e" +
    "\116\uff9e\125\uff9e\133\uff9e\135\uff9e\136\uff9e\142\uff9e\152" +
    "\uff9e\154\uff9e\157\uff9e\160\uff9e\164\uff9e\170\uff9e\172\uff9e" +
    "\173\uff9e\001\002\000\070\005\uff9d\050\uff9d\066\uff9d\067" +
    "\uff9d\074\uff9d\077\uff9d\103\uff9d\106\uff9d\107\uff9d\110\uff9d" +
    "\112\uff9d\113\uff9d\115\uff9d\116\uff9d\125\uff9d\133\uff9d\135" +
    "\uff9d\136\uff9d\142\uff9d\152\uff9d\154\uff9d\157\uff9d\160\uff9d" +
    "\164\uff9d\170\uff9d\172\uff9d\173\uff9d\001\002\000\070\005" +
    "\uffac\050\uffac\066\uffac\067\uffac\074\uffac\077\uffac\103\uffac" +
    "\106\uffac\107\uffac\110\uffac\112\uffac\113\uffac\115\uffac\116" +
    "\uffac\125\uffac\133\uffac\135\uffac\136\uffac\142\uffac\152\uffac" +
    "\154\uffac\157\uffac\160\uffac\164\uffac\170\uffac\172\uffac\173" +
    "\uffac\001\002\000\070\005\uffa3\050\uffa3\066\uffa3\067\uffa3" +
    "\074\uffa3\077\uffa3\103\uffa3\106\uffa3\107\uffa3\110\uffa3\112" +
    "\uffa3\113\uffa3\115\uffa3\116\uffa3\125\uffa3\133\uffa3\135\uffa3" +
    "\136\uffa3\142\uffa3\152\uffa3\154\uffa3\157\uffa3\160\uffa3\164" +
    "\uffa3\170\uffa3\172\uffa3\173\uffa3\001\002\000\070\005\uff97" +
    "\050\uff97\066\uff97\067\uff97\074\uff97\077\uff97\103\uff97\106" +
    "\uff97\107\uff97\110\uff97\112\uff97\113\uff97\115\uff97\116\uff97" +
    "\125\uff97\133\uff97\135\uff97\136\uff97\142\uff97\152\uff97\154" +
    "\uff97\157\uff97\160\uff97\164\uff97\170\uff97\172\uff97\173\uff97" +
    "\001\002\000\070\005\uffa7\050\uffa7\066\uffa7\067\uffa7\074" +
    "\uffa7\077\uffa7\103\uffa7\106\uffa7\107\uffa7\110\uffa7\112\uffa7" +
    "\113\uffa7\115\uffa7\116\uffa7\125\uffa7\133\uffa7\135\uffa7\136" +
    "\uffa7\142\uffa7\152\uffa7\154\uffa7\157\uffa7\160\uffa7\164\uffa7" +
    "\170\uffa7\172\uffa7\173\uffa7\001\002\000\070\005\uff94\050" +
    "\uff94\066\uff94\067\uff94\074\uff94\077\uff94\103\uff94\106\uff94" +
    "\107\uff94\110\uff94\112\uff94\113\uff94\115\uff94\116\uff94\125" +
    "\uff94\133\uff94\135\uff94\136\uff94\142\uff94\152\uff94\154\uff94" +
    "\157\uff94\160\uff94\164\uff94\170\uff94\172\uff94\173\uff94\001" +
    "\002\000\070\005\uff9a\050\uff9a\066\uff9a\067\uff9a\074\uff9a" +
    "\077\uff9a\103\uff9a\106\uff9a\107\uff9a\110\uff9a\112\uff9a\113" +
    "\uff9a\115\uff9a\116\uff9a\125\uff9a\133\uff9a\135\uff9a\136\uff9a" +
    "\142\uff9a\152\uff9a\154\uff9a\157\uff9a\160\uff9a\164\uff9a\170" +
    "\uff9a\172\uff9a\173\uff9a\001\002\000\070\005\uffa5\050\uffa5" +
    "\066\uffa5\067\uffa5\074\uffa5\077\uffa5\103\uffa5\106\uffa5\107" +
    "\uffa5\110\uffa5\112\uffa5\113\uffa5\115\uffa5\116\uffa5\125\uffa5" +
    "\133\uffa5\135\uffa5\136\uffa5\142\uffa5\152\uffa5\154\uffa5\157" +
    "\uffa5\160\uffa5\164\uffa5\170\uffa5\172\uffa5\173\uffa5\001\002" +
    "\000\070\005\uffa6\050\uffa6\066\uffa6\067\uffa6\074\uffa6\077" +
    "\uffa6\103\uffa6\106\uffa6\107\uffa6\110\uffa6\112\uffa6\113\uffa6" +
    "\115\uffa6\116\uffa6\125\uffa6\133\uffa6\135\uffa6\136\uffa6\142" +
    "\uffa6\152\uffa6\154\uffa6\157\uffa6\160\uffa6\164\uffa6\170\uffa6" +
    "\172\uffa6\173\uffa6\001\002\000\070\005\uffaa\050\uffaa\066" +
    "\uffaa\067\uffaa\074\uffaa\077\uffaa\103\uffaa\106\uffaa\107\uffaa" +
    "\110\uffaa\112\uffaa\113\uffaa\115\uffaa\116\uffaa\125\uffaa\133" +
    "\uffaa\135\uffaa\136\uffaa\142\uffaa\152\uffaa\154\uffaa\157\uffaa" +
    "\160\uffaa\164\uffaa\170\uffaa\172\uffaa\173\uffaa\001\002\000" +
    "\070\005\uff9b\050\uff9b\066\uff9b\067\uff9b\074\uff9b\077\uff9b" +
    "\103\uff9b\106\uff9b\107\uff9b\110\uff9b\112\uff9b\113\uff9b\115" +
    "\uff9b\116\uff9b\125\uff9b\133\uff9b\135\uff9b\136\uff9b\142\uff9b" +
    "\152\uff9b\154\uff9b\157\uff9b\160\uff9b\164\uff9b\170\uff9b\172" +
    "\uff9b\173\uff9b\001\002\000\070\005\uffad\050\uffad\066\uffad" +
    "\067\uffad\074\uffad\077\uffad\103\uffad\106\uffad\107\uffad\110" +
    "\uffad\112\uffad\113\uffad\115\uffad\116\uffad\125\uffad\133\uffad" +
    "\135\uffad\136\uffad\142\uffad\152\uffad\154\uffad\157\uffad\160" +
    "\uffad\164\uffad\170\uffad\172\uffad\173\uffad\001\002\000\070" +
    "\005\uffa0\050\uffa0\066\uffa0\067\uffa0\074\uffa0\077\uffa0\103" +
    "\uffa0\106\uffa0\107\uffa0\110\uffa0\112\uffa0\113\uffa0\115\uffa0" +
    "\116\uffa0\125\uffa0\133\uffa0\135\uffa0\136\uffa0\142\uffa0\152" +
    "\uffa0\154\uffa0\157\uffa0\160\uffa0\164\uffa0\170\uffa0\172\uffa0" +
    "\173\uffa0\001\002\000\070\005\uff99\050\uff99\066\uff99\067" +
    "\uff99\074\uff99\077\uff99\103\uff99\106\uff99\107\uff99\110\uff99" +
    "\112\uff99\113\uff99\115\uff99\116\uff99\125\uff99\133\uff99\135" +
    "\uff99\136\uff99\142\uff99\152\uff99\154\uff99\157\uff99\160\uff99" +
    "\164\uff99\170\uff99\172\uff99\173\uff99\001\002\000\010\005" +
    "\015\172\016\173\014\001\002\000\070\005\uff96\050\uff96" +
    "\066\uff96\067\uff96\074\uff96\077\uff96\103\uff96\106\uff96\107" +
    "\uff96\110\uff96\112\uff96\113\uff96\115\uff96\116\uff96\125\uff96" +
    "\133\uff96\135\uff96\136\uff96\142\uff96\152\uff96\154\uff96\157" +
    "\uff96\160\uff96\164\uff96\170\uff96\172\uff96\173\uff96\001\002" +
    "\000\006\013\332\170\330\001\002\000\004\010\uffc0\001" +
    "\002\000\004\010\335\001\002\000\006\014\uffb8\170\uffb8" +
    "\001\002\000\006\014\334\170\070\001\002\000\004\010" +
    "\uffbf\001\002\000\010\005\015\172\016\173\014\001\002" +
    "\000\004\010\337\001\002\000\012\010\340\011\342\144" +
    "\343\145\341\001\002\000\010\005\015\172\016\173\014" +
    "\001\002\000\004\012\356\001\002\000\036\010\uffe0\011" +
    "\uffe0\056\uffe0\076\uffe0\101\uffe0\105\uffe0\114\uffe0\121\uffe0" +
    "\124\uffe0\155\uffe0\161\uffe0\162\uffe0\166\uffe0\167\uffe0\001" +
    "\002\000\004\012\344\001\002\000\030\005\015\024\231" +
    "\025\230\026\226\030\227\036\225\037\224\040\223\047" +
    "\232\172\016\173\014\001\002\000\006\010\352\011\353" +
    "\001\002\000\004\055\350\001\002\000\014\010\uffc8\011" +
    "\uffc8\014\uffc8\131\235\151\234\001\002\000\022\024\231" +
    "\025\230\026\226\030\227\036\225\037\224\040\223\047" +
    "\232\001\002\000\014\010\uffc9\011\uffc9\014\uffc9\131\235" +
    "\151\234\001\002\000\010\005\015\172\016\173\014\001" +
    "\002\000\036\010\uffe2\011\uffe2\056\uffe2\076\uffe2\101\uffe2" +
    "\105\uffe2\114\uffe2\121\uffe2\124\uffe2\155\uffe2\161\uffe2\162" +
    "\uffe2\166\uffe2\167\uffe2\001\002\000\004\011\355\001\002" +
    "\000\036\010\uffe3\011\uffe3\056\uffe3\076\uffe3\101\uffe3\105" +
    "\uffe3\114\uffe3\121\uffe3\124\uffe3\155\uffe3\161\uffe3\162\uffe3" +
    "\166\uffe3\167\uffe3\001\002\000\030\005\015\024\231\025" +
    "\230\026\226\030\227\036\225\037\224\040\223\047\232" +
    "\172\016\173\014\001\002\000\006\010\360\011\361\001" +
    "\002\000\012\005\015\144\363\172\016\173\014\001\002" +
    "\000\036\010\uffe4\011\uffe4\056\uffe4\076\uffe4\101\uffe4\105" +
    "\uffe4\114\uffe4\121\uffe4\124\uffe4\155\uffe4\161\uffe4\162\uffe4" +
    "\166\uffe4\167\uffe4\001\002\000\004\011\372\001\002\000" +
    "\004\012\364\001\002\000\030\005\015\024\231\025\230" +
    "\026\226\030\227\036\225\037\224\040\223\047\232\172" +
    "\016\173\014\001\002\000\006\010\366\011\367\001\002" +
    "\000\010\005\015\172\016\173\014\001\002\000\036\010" +
    "\uffe6\011\uffe6\056\uffe6\076\uffe6\101\uffe6\105\uffe6\114\uffe6" +
    "\121\uffe6\124\uffe6\155\uffe6\161\uffe6\162\uffe6\166\uffe6\167" +
    "\uffe6\001\002\000\004\011\371\001\002\000\036\010\uffe7" +
    "\011\uffe7\056\uffe7\076\uffe7\101\uffe7\105\uffe7\114\uffe7\121" +
    "\uffe7\124\uffe7\155\uffe7\161\uffe7\162\uffe7\166\uffe7\167\uffe7" +
    "\001\002\000\036\010\uffe5\011\uffe5\056\uffe5\076\uffe5\101" +
    "\uffe5\105\uffe5\114\uffe5\121\uffe5\124\uffe5\155\uffe5\161\uffe5" +
    "\162\uffe5\166\uffe5\167\uffe5\001\002\000\004\011\374\001" +
    "\002\000\036\010\uffe1\011\uffe1\056\uffe1\076\uffe1\101\uffe1" +
    "\105\uffe1\114\uffe1\121\uffe1\124\uffe1\155\uffe1\161\uffe1\162" +
    "\uffe1\166\uffe1\167\uffe1\001\002\000\036\010\uffea\011\uffea" +
    "\056\uffea\076\uffea\101\uffea\105\uffea\114\uffea\121\uffea\124" +
    "\uffea\155\uffea\161\uffea\162\uffea\166\uffea\167\uffea\001\002" +
    "\000\006\013\332\170\330\001\002\000\004\010\u0100\001" +
    "\002\000\010\005\015\172\016\173\014\001\002\000\004" +
    "\010\u0102\001\002\000\004\013\u0103\001\002\000\032\005" +
    "\015\014\uffc7\024\231\025\230\026\226\030\227\036\225" +
    "\037\224\040\223\047\232\172\016\173\014\001\002\000" +
    "\006\010\u0108\014\uffc6\001\002\000\004\014\u0106\001\002" +
    "\000\004\011\u0107\001\002\000\036\010\uffdd\011\uffdd\056" +
    "\uffdd\076\uffdd\101\uffdd\105\uffdd\114\uffdd\121\uffdd\124\uffdd" +
    "\155\uffdd\161\uffdd\162\uffdd\166\uffdd\167\uffdd\001\002\000" +
    "\032\005\015\014\uffc7\024\231\025\230\026\226\030\227" +
    "\036\225\037\224\040\223\047\232\172\016\173\014\001" +
    "\002\000\004\014\uffc5\001\002\000\036\010\ufff7\011\ufff7" +
    "\056\ufff7\076\ufff7\101\ufff7\105\ufff7\114\ufff7\121\ufff7\124" +
    "\ufff7\155\ufff7\161\ufff7\162\ufff7\166\ufff7\167\ufff7\001\002" +
    "\000\036\010\uff79\011\uff79\056\uff79\076\uff79\101\uff79\105" +
    "\uff79\114\uff79\121\uff79\124\uff79\155\uff79\161\uff79\162\uff79" +
    "\166\uff79\167\uff79\001\002\000\036\010\uff7b\011\uff7b\056" +
    "\uff7b\076\uff7b\101\uff7b\105\uff7b\114\uff7b\121\uff7b\124\uff7b" +
    "\155\uff7b\161\uff7b\162\uff7b\166\uff7b\167\uff7b\001\002\000" +
    "\036\010\uff7a\011\uff7a\056\uff7a\076\uff7a\101\uff7a\105\uff7a" +
    "\114\uff7a\121\uff7a\124\uff7a\155\uff7a\161\uff7a\162\uff7a\166" +
    "\uff7a\167\uff7a\001\002\000\036\010\uff77\011\uff77\056\uff77" +
    "\076\uff77\101\uff77\105\uff77\114\uff77\121\uff77\124\uff77\155" +
    "\uff77\161\uff77\162\uff77\166\uff77\167\uff77\001\002\000\036" +
    "\010\uff78\011\uff78\056\uff78\076\uff78\101\uff78\105\uff78\114" +
    "\uff78\121\uff78\124\uff78\155\uff78\161\uff78\162\uff78\166\uff78" +
    "\167\uff78\001\002\000\006\013\066\170\064\001\002\000" +
    "\004\010\u0112\001\002\000\010\005\015\172\016\173\014" +
    "\001\002\000\004\010\u0114\001\002\000\004\150\u0115\001" +
    "\002\000\004\012\u0116\001\002\000\022\024\231\025\230" +
    "\026\226\030\227\036\225\037\224\040\223\047\232\001" +
    "\002\000\010\011\u0118\131\235\151\234\001\002\000\036" +
    "\010\uffd8\011\uffd8\056\uffd8\076\uffd8\101\uffd8\105\uffd8\114" +
    "\uffd8\121\uffd8\124\uffd8\155\uffd8\161\uffd8\162\uffd8\166\uffd8" +
    "\167\uffd8\001\002\000\006\013\176\170\175\001\002\000" +
    "\004\010\u011b\001\002\000\010\005\015\172\016\173\014" +
    "\001\002\000\004\010\u011d\001\002\000\004\013\u011e\001" +
    "\002\000\032\005\015\014\uffc7\024\231\025\230\026\226" +
    "\030\227\036\225\037\224\040\223\047\232\172\016\173" +
    "\014\001\002\000\004\014\u0120\001\002\000\004\011\u0121" +
    "\001\002\000\050\010\ufff0\011\ufff0\056\ufff0\065\ufff0\076" +
    "\ufff0\101\ufff0\102\ufff0\105\ufff0\114\ufff0\121\ufff0\122\ufff0" +
    "\123\ufff0\124\ufff0\132\ufff0\155\ufff0\161\ufff0\162\ufff0\166" +
    "\ufff0\167\ufff0\001\002\000\006\013\176\170\175\001\002" +
    "\000\004\010\u0124\001\002\000\010\005\015\172\016\173" +
    "\014\001\002\000\004\010\u0126\001\002\000\006\144\u0128" +
    "\145\u0127\001\002\000\004\012\u012c\001\002\000\004\012" +
    "\u0129\001\002\000\022\024\231\025\230\026\226\030\227" +
    "\036\225\037\224\040\223\047\232\001\002\000\010\011" +
    "\u012b\131\235\151\234\001\002\000\050\010\ufff1\011\ufff1" +
    "\056\ufff1\065\ufff1\076\ufff1\101\ufff1\102\ufff1\105\ufff1\114" +
    "\ufff1\121\ufff1\122\ufff1\123\ufff1\124\ufff1\132\ufff1\155\ufff1" +
    "\161\ufff1\162\ufff1\166\ufff1\167\ufff1\001\002\000\022\024" +
    "\231\025\230\026\226\030\227\036\225\037\224\040\223" +
    "\047\232\001\002\000\010\010\u012e\131\235\151\234\001" +
    "\002\000\004\144\u012f\001\002\000\004\012\u0130\001\002" +
    "\000\022\024\231\025\230\026\226\030\227\036\225\037" +
    "\224\040\223\047\232\001\002\000\010\011\u0132\131\235" +
    "\151\234\001\002\000\050\010\ufff2\011\ufff2\056\ufff2\065" +
    "\ufff2\076\ufff2\101\ufff2\102\ufff2\105\ufff2\114\ufff2\121\ufff2" +
    "\122\ufff2\123\ufff2\124\ufff2\132\ufff2\155\ufff2\161\ufff2\162" +
    "\ufff2\166\ufff2\167\ufff2\001\002\000\006\013\066\170\064" +
    "\001\002\000\004\010\u0135\001\002\000\004\013\u0136\001" +
    "\002\000\014\005\015\014\uffb0\171\u0139\172\016\173\014" +
    "\001\002\000\014\016\u0145\017\u0149\060\u0146\071\u0148\073" +
    "\u0147\001\002\000\004\014\u0143\001\002\000\004\017\u013d" +
    "\001\002\000\006\010\u013b\014\uffaf\001\002\000\014\005" +
    "\015\014\uffb0\171\u0139\172\016\173\014\001\002\000\004" +
    "\014\uffae\001\002\000\010\005\015\172\016\173\014\001" +
    "\002\000\004\017\u013f\001\002\000\004\171\u0140\001\002" +
    "\000\004\104\u0141\001\002\000\010\005\015\172\016\173" +
    "\014\001\002\000\006\010\uffb1\014\uffb1\001\002\000\004" +
    "\011\u0144\001\002\000\036\010\uffd7\011\uffd7\056\uffd7\076" +
    "\uffd7\101\uffd7\105\uffd7\114\uffd7\121\uffd7\124\uffd7\155\uffd7" +
    "\161\uffd7\162\uffd7\166\uffd7\167\uffd7\001\002\000\004\171" +
    "\u014d\001\002\000\006\010\uffb4\014\uffb4\001\002\000\006" +
    "\010\uffb6\014\uffb6\001\002\000\006\010\uffb5\014\uffb5\001" +
    "\002\000\004\171\u014a\001\002\000\004\104\u014b\001\002" +
    "\000\010\005\015\172\016\173\014\001\002\000\006\010" +
    "\uffb2\014\uffb2\001\002\000\004\104\u014e\001\002\000\010" +
    "\005\015\172\016\173\014\001\002\000\006\010\uffb3\014" +
    "\uffb3\001\002\000\006\013\332\170\330\001\002\000\004" +
    "\010\u0152\001\002\000\010\005\015\172\016\173\014\001" +
    "\002\000\006\010\u0154\011\u0155\001\002\000\006\144\u0157" +
    "\145\u0156\001\002\000\036\010\uffed\011\uffed\056\uffed\076" +
    "\uffed\101\uffed\105\uffed\114\uffed\121\uffed\124\uffed\155\uffed" +
    "\161\uffed\162\uffed\166\uffed\167\uffed\001\002\000\004\012" +
    "\u015b\001\002\000\004\012\u0158\001\002\000\022\024\231" +
    "\025\230\026\226\030\227\036\225\037\224\040\223\047" +
    "\232\001\002\000\010\011\u015a\131\235\151\234\001\002" +
    "\000\036\010\uffec\011\uffec\056\uffec\076\uffec\101\uffec\105" +
    "\uffec\114\uffec\121\uffec\124\uffec\155\uffec\161\uffec\162\uffec" +
    "\166\uffec\167\uffec\001\002\000\022\024\231\025\230\026" +
    "\226\030\227\036\225\037\224\040\223\047\232\001\002" +
    "\000\010\010\u015d\131\235\151\234\001\002\000\004\144" +
    "\u015e\001\002\000\004\012\u015f\001\002\000\022\024\231" +
    "\025\230\026\226\030\227\036\225\037\224\040\223\047" +
    "\232\001\002\000\010\011\u0161\131\235\151\234\001\002" +
    "\000\036\010\uffeb\011\uffeb\056\uffeb\076\uffeb\101\uffeb\105" +
    "\uffeb\114\uffeb\121\uffeb\124\uffeb\155\uffeb\161\uffeb\162\uffeb" +
    "\166\uffeb\167\uffeb\001\002\000\004\005\u0163\001\002\000" +
    "\004\173\u0164\001\002\000\004\006\u0165\001\002\000\010" +
    "\002\uffff\004\uffff\034\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\006\002\004\004\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\051\006\036\007\032\010\031\012\041\013" +
    "\052\014\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0109\001\001\000\002\001\001" +
    "\000\004\011\374\001\001\000\002\001\001\000\004\034" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\051\006\036\007\032\010\031\012\041" +
    "\013\052\014\054\001\001\000\002\001\001\000\004\012" +
    "\061\001\001\000\002\001\001\000\004\012\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\066" +
    "\001\001\000\004\024\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\137\001\001\000\002\001\001\000\004" +
    "\035\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\146\001\001" +
    "\000\002\001\001\000\004\035\150\001\001\000\002\001" +
    "\001\000\004\035\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\160\001\001\000" +
    "\002\001\001\000\004\025\164\001\001\000\002\001\001" +
    "\000\004\035\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\071\001\001\000\002\001\001\000\004" +
    "\023\167\001\001\000\002\001\001\000\004\035\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\176" +
    "\001\001\000\002\001\001\000\004\025\202\001\001\000" +
    "\002\001\001\000\004\035\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\071\001\001\000\002\001" +
    "\001\000\004\021\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\271\001\001\000\002\001\001\000\006\030\313\035" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\325\001\001\000\002\001\001" +
    "\000\004\022\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\332\001\001\000\004\024\071\001\001" +
    "\000\002\001\001\000\004\035\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\346\016\344\035\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\350\001\001\000" +
    "\002\001\001\000\004\035\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\346\016" +
    "\356\035\345\001\001\000\002\001\001\000\004\035\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\346\016\364\035\345\001\001\000\002" +
    "\001\001\000\004\035\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\376\001\001\000\002\001\001\000\004\035\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\346\016" +
    "\u0103\017\u0104\035\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\346\016\u0103\017\u0108\035\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0110\001\001\000\002\001\001\000\004\035\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0119\001\001\000\002\001\001\000\004" +
    "\035\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\346\016\u0103\017\u011e\035\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0122\001\001\000\002\001\001\000\004\035\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0133\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\u0139\027\u0137\035\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\u0139\027\u013b\035\u0136\001\001\000\002\001\001\000" +
    "\004\035\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u014b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u014e\001" +
    "\001\000\002\001\001\000\004\022\u0150\001\001\000\002" +
    "\001\001\000\004\035\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u015b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u015f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public net.lemonmodel.patterns.parser.Absyn.Statements pStatements() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (net.lemonmodel.patterns.parser.Absyn.Statements) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // URI ::= FullURI 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURI(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // URI ::= _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName2(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // URI ::= _IDENT_ _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Register ::= _SYMB_114 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVulgarRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Register ::= _SYMB_110 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETechnicalRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Register ::= _SYMB_109 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETabooRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Register ::= _SYMB_105 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlangRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Register ::= _SYMB_80 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENeutralRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Register ::= _SYMB_77 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIronicRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Register ::= _SYMB_72 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInHouseRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Register ::= _SYMB_65 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFormalRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Register ::= _SYMB_61 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFacetiousRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Register ::= _SYMB_58 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDialectRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Register ::= _SYMB_42 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBenchLevelRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Gender ::= _SYMB_86 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOtherGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Gender ::= _SYMB_49 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommonGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Gender ::= _SYMB_79 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENeutGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Gender ::= _SYMB_62 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFemGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Gender ::= _SYMB_78 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EMascGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // POSTag ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyPOS(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // POSTag ::= _SYMB_113 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // POSTag ::= _SYMB_106 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlashPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // POSTag ::= _SYMB_103 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESemiColonPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // POSTag ::= _SYMB_99 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPunctuationPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // POSTag ::= _SYMB_95 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPronounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // POSTag ::= _SYMB_93 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // POSTag ::= _SYMB_92 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // POSTag ::= _SYMB_91 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPointPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // POSTag ::= _SYMB_88 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // POSTag ::= _SYMB_84 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENumeralPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // POSTag ::= _SYMB_83 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // POSTag ::= _SYMB_76 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInterjectionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // POSTag ::= _SYMB_57 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDeterminerPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // POSTag ::= _SYMB_54 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // POSTag ::= _SYMB_52 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConjunctionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // POSTag ::= _SYMB_48 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // POSTag ::= _SYMB_47 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EColonPOSPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // POSTag ::= _SYMB_45 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECircumpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // POSTag ::= _SYMB_43 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBulletPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // POSTag ::= _SYMB_40 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // POSTag ::= _SYMB_39 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdverbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // POSTag ::= _SYMB_38 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // POSTag ::= _SYMB_37 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjectivePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ListCategory ::= ListCategory Category 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_1 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Category p_2 = (net.lemonmodel.patterns.parser.Absyn.Category)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ListCategory ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListCategory(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Category ::= URI _SYMB_12 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyCat(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Category ::= _SYMB_87 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticiple(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Category ::= _SYMB_74 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInfinitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Category ::= _SYMB_68 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGerundive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Category ::= _SYMB_51 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConditional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Category ::= _SYMB_107 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubjunctive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Category ::= _SYMB_73 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndicative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Category ::= _SYMB_70 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Category ::= _SYMB_71 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperfect(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Category ::= _SYMB_112 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EThirdPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Category ::= _SYMB_102 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESecondPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Category ::= _SYMB_63 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFirstPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Category ::= _SYMB_66 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFuture(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Category ::= _SYMB_89 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Category ::= _SYMB_94 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPresent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Category ::= _SYMB_108 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperlative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Category ::= _SYMB_50 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EComparative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Category ::= _SYMB_56 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Category ::= _SYMB_67 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGenitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Category ::= _SYMB_36 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAccusative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Category ::= _SYMB_81 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENominative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Category ::= _SYMB_90 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPlural(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Category ::= _SYMB_59 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Category ::= _SYMB_104 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESingular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListScalarMembership ::= ScalarMembership _SYMB_4 ListScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_3 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListScalarMembership ::= ScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListScalarMembership ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ScalarMembership ::= _DOUBLE_ _SYMB_11 URI _SYMB_11 _DOUBLE_ _SYMB_64 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_5 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.BoundedScalarMembership(p_1,p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ScalarMembership ::= URI _SYMB_11 _DOUBLE_ _SYMB_64 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.LessThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ScalarMembership ::= URI _SYMB_10 _DOUBLE_ _SYMB_64 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.GreaterThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ScalarMembership ::= URI _SYMB_44 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CentralScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ScalarMembership ::= URI _SYMB_53 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ContravariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ScalarMembership ::= URI _SYMB_55 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CovariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListPOSTaggedWord ::= ListPOSTaggedWord POSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListPOSTaggedWord ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // POSTaggedWord ::= _STRING_ _SYMB_9 _STRING_ _SYMB_9 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_5 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELemmaPOSTaggedWord(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // POSTaggedWord ::= _STRING_ _SYMB_9 _STRING_ _SYMB_9 POSTag _SYMB_6 _SYMB_69 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_5 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELemmaPOSTaggedHeadWord(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // POSTaggedWord ::= _STRING_ _SYMB_9 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // POSTaggedWord ::= _STRING_ _SYMB_9 POSTag _SYMB_6 _SYMB_69 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedHeadWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PNP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PNP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListOntologyFrameElement ::= OntologyFrameElement _SYMB_4 ListOntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_3 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListOntologyFrameElement ::= OntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListOntologyFrameElement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OntologyFrameElement ::= Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArgAsOFE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OntologyFrameElement ::= URI _SYMB_41 Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_3 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURIAsSynArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Arg ::= _SYMB_26 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPossessiveAdjunct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Arg ::= _SYMB_27 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arg ::= _SYMB_28 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Arg ::= _SYMB_17 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeSubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Arg ::= _SYMB_16 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Arg ::= _SYMB_20 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Arg ::= _SYMB_18 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arg ::= _SYMB_35 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arg ::= Arg _SYMB_101 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERestrictedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arg ::= Arg _SYMB_85 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOptionalArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListPatternType ::= PatternType _SYMB_4 ListPatternType 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.PatternType p_1 = (net.lemonmodel.patterns.parser.Absyn.PatternType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPatternType p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPatternType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListPatternType ::= PatternType 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.PatternType p_1 = (net.lemonmodel.patterns.parser.Absyn.PatternType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPatternType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListPatternType ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPatternType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AdjectivePattern ::= _SYMB_33 _SYMB_3 AP _SYMB_4 _SYMB_7 ListScalarMembership _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_6 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EScalarAdjective(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AdjectivePattern ::= _SYMB_30 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _SYMB_100 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalAdjective(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AdjectivePattern ::= _SYMB_29 _SYMB_3 AP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPropertyModifyingAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AdjectivePattern ::= _SYMB_22 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveDataPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AdjectivePattern ::= _SYMB_23 _SYMB_3 AP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveObjectPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AdjectivePattern ::= _SYMB_21 _SYMB_3 AP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VerbPattern3 ::= _SYMB_19 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEventVerb(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VerbPattern2 ::= _SYMB_75 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VerbPattern2 ::= _SYMB_60 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb8(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_8 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb7(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_96 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb6(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_96 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb5(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb4(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb3(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_96 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb2(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_96 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_15 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb1(p_3,p_5,p_9,p_13,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VerbPattern ::= VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDunnotelicEventVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VerbPattern ::= _SYMB_82 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENontelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VerbPattern ::= _SYMB_111 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VerbPattern ::= _SYMB_34 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_4 _SYMB_96 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb3(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VerbPattern ::= _SYMB_34 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_96 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VerbPattern ::= _SYMB_34 _SYMB_3 VP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb1(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_46 _SYMB_6 URI _SYMB_4 _SYMB_98 _SYMB_6 URI _SYMB_4 _SYMB_96 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun2(p_3,p_7,p_11,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_46 _SYMB_6 URI _SYMB_4 _SYMB_98 _SYMB_6 URI _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_4 _SYMB_96 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_19 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun1(p_3,p_7,p_11,p_15,p_19); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NounPattern ::= _SYMB_31 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalMultivalentNoun(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NounPattern ::= _SYMB_32 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_96 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NounPattern ::= _SYMB_32 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_4 _SYMB_96 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun1(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NounPattern ::= _SYMB_13 _SYMB_3 NP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassNoun(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NounPattern ::= _SYMB_25 _SYMB_3 PNP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.PNP p_3 = (net.lemonmodel.patterns.parser.Absyn.PNP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EName(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Pattern ::= AdjectivePattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.AdjectivePattern p_1 = (net.lemonmodel.patterns.parser.Absyn.AdjectivePattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjective(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Pattern ::= VerbPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Pattern ::= NounPattern Gender 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Gender p_2 = (net.lemonmodel.patterns.parser.Absyn.Gender)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounWithGender(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Pattern ::= NounPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENoun(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Pattern ::= Pattern _SYMB_115 ListCategory _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_3 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithForm(p_1,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PatternType ::= Pattern 
            {
              net.lemonmodel.patterns.parser.Absyn.PatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECorePattern(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternType",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PatternType ::= Pattern Register 
            {
              net.lemonmodel.patterns.parser.Absyn.PatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Register p_2 = (net.lemonmodel.patterns.parser.Absyn.Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithRegister(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternType",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStatement ::= ListStatement Statement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Statement p_2 = (net.lemonmodel.patterns.parser.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStatement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= _SYMB_24 _SYMB_3 URI _SYMB_4 _STRING_ _SYMB_4 ListPatternType _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPatternType p_7 = (net.lemonmodel.patterns.parser.Absyn.ListPatternType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELexicon(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= _SYMB_0 _IDENT_ _SYMB_1 FullURI _SYMB_2 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrefix(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Statements ::= ListStatement 
            {
              net.lemonmodel.patterns.parser.Absyn.Statements RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStatments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Statements start_val = (net.lemonmodel.patterns.parser.Absyn.Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

