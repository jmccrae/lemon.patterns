
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 30 16:34:21 CEST 2014
//----------------------------------------------------

package net.lemonmodel.patterns.parser;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 30 16:34:21 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\003\000\002\006\006\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\007\010\000\002\007\010\000\002\007" +
    "\012\000\002\007\012\000\002\007\020\000\002\007\014" +
    "\000\002\007\014\000\002\007\026\000\002\007\022\000" +
    "\002\010\010\000\002\010\014\000\002\010\020\000\002" +
    "\010\004\000\002\010\004\000\002\010\003\000\002\010" +
    "\022\000\002\010\020\000\002\010\016\000\002\010\014" +
    "\000\002\010\016\000\002\010\014\000\002\010\012\000" +
    "\002\010\010\000\002\011\004\000\002\011\004\000\002" +
    "\012\014\000\002\013\010\000\002\013\012\000\002\013" +
    "\012\000\002\013\014\000\002\013\012\000\002\014\002" +
    "\000\002\014\003\000\002\014\005\000\002\015\004\000" +
    "\002\015\005\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\006\000\002\015\006\000\002\015\003\000\002\016\005" +
    "\000\002\016\003\000\002\017\002\000\002\017\003\000" +
    "\002\017\005\000\002\020\003\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\022\003\000\002\022" +
    "\005\000\002\023\003\000\002\023\005\000\002\024\007" +
    "\000\002\024\005\000\002\024\011\000\002\024\007\000" +
    "\002\025\002\000\002\025\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\007\000\002\026" +
    "\007\000\002\026\011\000\002\027\002\000\002\027\003" +
    "\000\002\027\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\002" +
    "\000\002\031\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\035\005\000" +
    "\002\035\004\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\010\002\ufffd\004\ufffd\035\ufffd\001\002\000" +
    "\010\002\000\004\007\035\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\173\u016b\001" +
    "\002\000\010\002\ufffc\004\ufffc\035\ufffc\001\002\000\004" +
    "\007\012\001\002\000\010\005\014\173\016\174\015\001" +
    "\002\000\004\010\022\001\002\000\004\173\021\001\002" +
    "\000\120\005\uff68\010\uff68\011\uff68\014\uff68\016\uff68\017" +
    "\uff68\020\uff68\051\uff68\056\uff68\061\uff68\067\uff68\070\uff68" +
    "\072\uff68\074\uff68\075\uff68\100\uff68\104\uff68\107\uff68\110" +
    "\uff68\111\uff68\113\uff68\114\uff68\116\uff68\117\uff68\126\uff68" +
    "\132\uff68\134\uff68\136\uff68\137\uff68\143\uff68\152\uff68\153" +
    "\uff68\155\uff68\160\uff68\161\uff68\165\uff68\171\uff68\173\uff68" +
    "\174\uff68\001\002\000\004\005\017\001\002\000\004\173" +
    "\020\001\002\000\120\005\uff6a\010\uff6a\011\uff6a\014\uff6a" +
    "\016\uff6a\017\uff6a\020\uff6a\051\uff6a\056\uff6a\061\uff6a\067" +
    "\uff6a\070\uff6a\072\uff6a\074\uff6a\075\uff6a\100\uff6a\104\uff6a" +
    "\107\uff6a\110\uff6a\111\uff6a\113\uff6a\114\uff6a\116\uff6a\117" +
    "\uff6a\126\uff6a\132\uff6a\134\uff6a\136\uff6a\137\uff6a\143\uff6a" +
    "\152\uff6a\153\uff6a\155\uff6a\160\uff6a\161\uff6a\165\uff6a\171" +
    "\uff6a\173\uff6a\174\uff6a\001\002\000\120\005\uff69\010\uff69" +
    "\011\uff69\014\uff69\016\uff69\017\uff69\020\uff69\051\uff69\056" +
    "\uff69\061\uff69\067\uff69\070\uff69\072\uff69\074\uff69\075\uff69" +
    "\100\uff69\104\uff69\107\uff69\110\uff69\111\uff69\113\uff69\114" +
    "\uff69\116\uff69\117\uff69\126\uff69\132\uff69\134\uff69\136\uff69" +
    "\137\uff69\143\uff69\152\uff69\153\uff69\155\uff69\160\uff69\161" +
    "\uff69\165\uff69\171\uff69\173\uff69\174\uff69\001\002\000\004" +
    "\171\023\001\002\000\004\010\024\001\002\000\046\011" +
    "\uffd5\021\041\022\040\023\036\026\035\030\052\032\050" +
    "\033\047\034\045\036\044\037\043\043\031\044\030\045" +
    "\027\046\026\047\025\127\051\164\034\001\002\000\004" +
    "\007\u0159\001\002\000\004\007\u013c\001\002\000\004\007" +
    "\u012b\001\002\000\004\007\u0122\001\002\000\004\007\u0119" +
    "\001\002\000\036\010\ufff6\011\ufff6\057\ufff6\077\ufff6\102" +
    "\ufff6\106\ufff6\115\ufff6\122\ufff6\125\ufff6\156\ufff6\162\ufff6" +
    "\163\ufff6\167\ufff6\170\ufff6\001\002\000\050\010\ufff8\011" +
    "\ufff8\057\ufff8\066\u0118\077\ufff8\102\ufff8\103\u0116\106\ufff8" +
    "\115\ufff8\122\ufff8\123\u0114\124\u0115\125\ufff8\133\u0117\156" +
    "\ufff8\162\ufff8\163\ufff8\167\ufff8\170\ufff8\001\002\000\006" +
    "\101\171\120\167\001\002\000\004\007\u010b\001\002\000" +
    "\004\007\356\001\002\000\036\010\ufffa\011\ufffa\057\314" +
    "\077\304\102\320\106\315\115\312\122\311\125\310\156" +
    "\307\162\306\163\305\167\317\170\316\001\002\000\004" +
    "\007\255\001\002\000\004\007\250\001\002\000\036\010" +
    "\uffe6\011\uffe6\057\uffe6\077\uffe6\102\uffe6\106\uffe6\115\uffe6" +
    "\122\uffe6\125\uffe6\156\uffe6\162\uffe6\163\uffe6\167\uffe6\170" +
    "\uffe6\001\002\000\004\007\235\001\002\000\004\007\224" +
    "\001\002\000\004\007\215\001\002\000\004\011\214\001" +
    "\002\000\004\007\205\001\002\000\004\007\174\001\002" +
    "\000\006\101\171\120\167\001\002\000\004\007\057\001" +
    "\002\000\006\010\055\011\uffd4\001\002\000\036\010\ufff5" +
    "\011\ufff5\057\ufff5\077\ufff5\102\ufff5\106\ufff5\115\ufff5\122" +
    "\ufff5\125\ufff5\156\ufff5\162\ufff5\163\ufff5\167\ufff5\170\ufff5" +
    "\001\002\000\046\011\uffd5\021\041\022\040\023\036\026" +
    "\035\030\052\032\050\033\047\034\045\036\044\037\043" +
    "\043\031\044\030\045\027\046\026\047\025\127\051\164" +
    "\034\001\002\000\004\011\uffd3\001\002\000\006\013\062" +
    "\171\060\001\002\000\004\010\uffbf\001\002\000\004\010" +
    "\130\001\002\000\006\014\uffb7\171\uffb7\001\002\000\006" +
    "\014\065\171\064\001\002\000\004\015\067\001\002\000" +
    "\004\010\uffbe\001\002\000\006\014\uffb6\171\uffb6\001\002" +
    "\000\062\052\117\053\116\054\105\055\104\060\103\062" +
    "\101\064\100\065\077\071\113\073\110\076\106\121\102" +
    "\130\112\131\111\135\107\140\075\141\074\142\073\144" +
    "\071\150\120\154\115\157\114\166\076\171\070\001\002" +
    "\000\012\012\uff7b\014\uff7b\015\123\171\uff7b\001\002\000" +
    "\010\012\uff80\014\uff80\171\uff80\001\002\000\010\012\121" +
    "\014\uffba\171\uffba\001\002\000\010\012\uff81\014\uff81\171" +
    "\uff81\001\002\000\010\012\uff82\014\uff82\171\uff82\001\002" +
    "\000\010\012\uff83\014\uff83\171\uff83\001\002\000\010\012" +
    "\uff7c\014\uff7c\171\uff7c\001\002\000\010\012\uff8b\014\uff8b" +
    "\171\uff8b\001\002\000\010\012\uff8c\014\uff8c\171\uff8c\001" +
    "\002\000\010\012\uff8d\014\uff8d\171\uff8d\001\002\000\010" +
    "\012\uff87\014\uff87\171\uff87\001\002\000\010\012\uff8e\014" +
    "\uff8e\171\uff8e\001\002\000\010\012\uff8f\014\uff8f\171\uff8f" +
    "\001\002\000\010\012\uff90\014\uff90\171\uff90\001\002\000" +
    "\010\012\uff88\014\uff88\171\uff88\001\002\000\010\012\uff84" +
    "\014\uff84\171\uff84\001\002\000\010\012\uff89\014\uff89\171" +
    "\uff89\001\002\000\010\012\uff85\014\uff85\171\uff85\001\002" +
    "\000\010\012\uff86\014\uff86\171\uff86\001\002\000\010\012" +
    "\uff8a\014\uff8a\171\uff8a\001\002\000\010\012\uff7d\014\uff7d" +
    "\171\uff7d\001\002\000\010\012\uff7e\014\uff7e\171\uff7e\001" +
    "\002\000\010\012\uff91\014\uff91\171\uff91\001\002\000\010" +
    "\012\uff92\014\uff92\171\uff92\001\002\000\010\012\uff7f\014" +
    "\uff7f\171\uff7f\001\002\000\004\112\122\001\002\000\006" +
    "\014\uffbb\171\uffbb\001\002\000\062\052\117\053\116\054" +
    "\105\055\104\060\103\062\101\064\100\065\077\071\113" +
    "\073\110\076\106\121\102\130\112\131\111\135\107\140" +
    "\075\141\074\142\073\144\071\150\120\154\115\157\114" +
    "\166\076\171\124\001\002\000\010\012\uff7b\014\uff7b\171" +
    "\uff7b\001\002\000\010\012\126\014\uffb8\171\uffb8\001\002" +
    "\000\004\112\127\001\002\000\006\014\uffb9\171\uffb9\001" +
    "\002\000\010\005\014\173\016\174\015\001\002\000\004" +
    "\010\132\001\002\000\004\013\133\001\002\000\032\005" +
    "\014\014\uffc6\024\143\025\142\027\140\031\137\040\136" +
    "\041\134\042\135\050\145\173\016\174\015\001\002\000" +
    "\004\007\164\001\002\000\004\007\161\001\002\000\014" +
    "\010\uffc9\011\uffc9\014\uffc9\132\uffc9\152\uffc9\001\002\000" +
    "\014\010\uffce\011\uffce\014\uffce\132\uffce\152\uffce\001\002" +
    "\000\014\010\uffcf\011\uffcf\014\uffcf\132\uffcf\152\uffcf\001" +
    "\002\000\006\010\157\014\uffc5\001\002\000\014\010\uffcc" +
    "\011\uffcc\014\uffcc\132\uffcc\152\uffcc\001\002\000\014\010" +
    "\uffcd\011\uffcd\014\uffcd\132\uffcd\152\uffcd\001\002\000\004" +
    "\056\155\001\002\000\014\010\uffd0\011\uffd0\014\uffd0\132" +
    "\uffd0\152\uffd0\001\002\000\004\014\153\001\002\000\014" +
    "\010\uffc7\011\uffc7\014\uffc7\132\151\152\150\001\002\000" +
    "\010\005\014\173\016\174\015\001\002\000\014\010\uffd2" +
    "\011\uffd2\014\uffd2\132\uffd2\152\uffd2\001\002\000\014\010" +
    "\uffd1\011\uffd1\014\uffd1\132\uffd1\152\uffd1\001\002\000\004" +
    "\011\154\001\002\000\036\010\uffdb\011\uffdb\057\uffdb\077" +
    "\uffdb\102\uffdb\106\uffdb\115\uffdb\122\uffdb\125\uffdb\156\uffdb" +
    "\162\uffdb\163\uffdb\167\uffdb\170\uffdb\001\002\000\022\024" +
    "\143\025\142\027\140\031\137\040\136\041\134\042\135" +
    "\050\145\001\002\000\014\010\uffc8\011\uffc8\014\uffc8\132" +
    "\151\152\150\001\002\000\032\005\014\014\uffc6\024\143" +
    "\025\142\027\140\031\137\040\136\041\134\042\135\050" +
    "\145\173\016\174\015\001\002\000\004\014\uffc4\001\002" +
    "\000\004\171\162\001\002\000\004\011\163\001\002\000" +
    "\014\010\uffcb\011\uffcb\014\uffcb\132\uffcb\152\uffcb\001\002" +
    "\000\004\171\165\001\002\000\004\011\166\001\002\000" +
    "\014\010\uffca\011\uffca\014\uffca\132\uffca\152\uffca\001\002" +
    "\000\004\030\052\001\002\000\036\010\uffe7\011\uffe7\057" +
    "\uffe7\077\uffe7\102\uffe7\106\uffe7\115\uffe7\122\uffe7\125\uffe7" +
    "\156\uffe7\162\uffe7\163\uffe7\167\uffe7\170\uffe7\001\002\000" +
    "\004\030\052\001\002\000\036\010\uffdd\011\uffdd\057\uffdd" +
    "\077\uffdd\102\uffdd\106\uffdd\115\uffdd\122\uffdd\125\uffdd\156" +
    "\uffdd\162\uffdd\163\uffdd\167\uffdd\170\uffdd\001\002\000\036" +
    "\010\uffdc\011\uffdc\057\uffdc\077\uffdc\102\uffdc\106\uffdc\115" +
    "\uffdc\122\uffdc\125\uffdc\156\uffdc\162\uffdc\163\uffdc\167\uffdc" +
    "\170\uffdc\001\002\000\006\013\177\171\175\001\002\000" +
    "\004\010\uffbd\001\002\000\004\010\202\001\002\000\006" +
    "\014\uffb7\171\uffb7\001\002\000\006\014\201\171\064\001" +
    "\002\000\004\010\uffbc\001\002\000\010\005\014\173\016" +
    "\174\015\001\002\000\004\011\204\001\002\000\036\010" +
    "\uffda\011\uffda\057\uffda\077\uffda\102\uffda\106\uffda\115\uffda" +
    "\122\uffda\125\uffda\156\uffda\162\uffda\163\uffda\167\uffda\170" +
    "\uffda\001\002\000\006\013\177\171\175\001\002\000\004" +
    "\010\207\001\002\000\010\005\014\173\016\174\015\001" +
    "\002\000\004\010\211\001\002\000\004\171\212\001\002" +
    "\000\004\011\213\001\002\000\036\010\uffd8\011\uffd8\057" +
    "\uffd8\077\uffd8\102\uffd8\106\uffd8\115\uffd8\122\uffd8\125\uffd8" +
    "\156\uffd8\162\uffd8\163\uffd8\167\uffd8\170\uffd8\001\002\000" +
    "\010\002\ufffe\004\ufffe\035\ufffe\001\002\000\006\013\177" +
    "\171\175\001\002\000\004\010\217\001\002\000\010\005" +
    "\014\173\016\174\015\001\002\000\004\010\221\001\002" +
    "\000\010\005\014\173\016\174\015\001\002\000\004\011" +
    "\223\001\002\000\036\010\uffd9\011\uffd9\057\uffd9\077\uffd9" +
    "\102\uffd9\106\uffd9\115\uffd9\122\uffd9\125\uffd9\156\uffd9\162" +
    "\uffd9\163\uffd9\167\uffd9\170\uffd9\001\002\000\006\013\227" +
    "\171\225\001\002\000\004\010\uffc3\001\002\000\004\010" +
    "\232\001\002\000\006\014\uffb7\171\uffb7\001\002\000\006" +
    "\014\231\171\064\001\002\000\004\010\uffc2\001\002\000" +
    "\010\005\014\173\016\174\015\001\002\000\004\011\234" +
    "\001\002\000\050\010\ufff4\011\ufff4\057\ufff4\066\ufff4\077" +
    "\ufff4\102\ufff4\103\ufff4\106\ufff4\115\ufff4\122\ufff4\123\ufff4" +
    "\124\ufff4\125\ufff4\133\ufff4\156\ufff4\162\ufff4\163\ufff4\167" +
    "\ufff4\170\ufff4\001\002\000\006\013\237\171\236\001\002" +
    "\000\004\010\uffc1\001\002\000\006\014\uffb7\171\uffb7\001" +
    "\002\000\004\010\241\001\002\000\010\005\014\173\016" +
    "\174\015\001\002\000\004\010\243\001\002\000\010\005" +
    "\014\173\016\174\015\001\002\000\004\011\245\001\002" +
    "\000\050\010\ufff2\011\ufff2\057\ufff2\066\ufff2\077\ufff2\102" +
    "\ufff2\103\ufff2\106\ufff2\115\ufff2\122\ufff2\123\ufff2\124\ufff2" +
    "\125\ufff2\133\ufff2\156\ufff2\162\ufff2\163\ufff2\167\ufff2\170" +
    "\ufff2\001\002\000\006\014\247\171\064\001\002\000\004" +
    "\010\uffc0\001\002\000\006\013\237\171\236\001\002\000" +
    "\004\010\252\001\002\000\010\005\014\173\016\174\015" +
    "\001\002\000\004\011\254\001\002\000\050\010\ufff3\011" +
    "\ufff3\057\ufff3\066\ufff3\077\ufff3\102\ufff3\103\ufff3\106\ufff3" +
    "\115\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3\133\ufff3\156" +
    "\ufff3\162\ufff3\163\ufff3\167\ufff3\170\ufff3\001\002\000\006" +
    "\013\237\171\236\001\002\000\004\010\257\001\002\000" +
    "\004\063\260\001\002\000\004\012\261\001\002\000\010" +
    "\005\014\173\016\174\015\001\002\000\004\010\263\001" +
    "\002\000\004\147\264\001\002\000\004\012\265\001\002" +
    "\000\010\005\014\173\016\174\015\001\002\000\004\010" +
    "\267\001\002\000\006\145\271\146\270\001\002\000\004" +
    "\012\275\001\002\000\004\012\272\001\002\000\022\024" +
    "\143\025\142\027\140\031\137\040\136\041\134\042\135" +
    "\050\145\001\002\000\010\011\274\132\151\152\150\001" +
    "\002\000\050\010\uffec\011\uffec\057\uffec\066\uffec\077\uffec" +
    "\102\uffec\103\uffec\106\uffec\115\uffec\122\uffec\123\uffec\124" +
    "\uffec\125\uffec\133\uffec\156\uffec\162\uffec\163\uffec\167\uffec" +
    "\170\uffec\001\002\000\022\024\143\025\142\027\140\031" +
    "\137\040\136\041\134\042\135\050\145\001\002\000\010" +
    "\010\277\132\151\152\150\001\002\000\004\145\300\001" +
    "\002\000\004\012\301\001\002\000\022\024\143\025\142" +
    "\027\140\031\137\040\136\041\134\042\135\050\145\001" +
    "\002\000\010\011\303\132\151\152\150\001\002\000\050" +
    "\010\uffed\011\uffed\057\uffed\066\uffed\077\uffed\102\uffed\103" +
    "\uffed\106\uffed\115\uffed\122\uffed\123\uffed\124\uffed\125\uffed" +
    "\133\uffed\156\uffed\162\uffed\163\uffed\167\uffed\170\uffed\001" +
    "\002\000\006\010\uff74\011\uff74\001\002\000\006\010\uff6c" +
    "\011\uff6c\001\002\000\006\010\uff6d\011\uff6d\001\002\000" +
    "\006\010\uff6e\011\uff6e\001\002\000\006\010\uff6f\011\uff6f" +
    "\001\002\000\006\010\uff70\011\uff70\001\002\000\006\010" +
    "\uff71\011\uff71\001\002\000\006\010\ufffb\011\ufffb\001\002" +
    "\000\006\010\uff75\011\uff75\001\002\000\006\010\uff72\011" +
    "\uff72\001\002\000\070\005\uff94\051\uff94\067\uff94\070\uff94" +
    "\075\uff94\100\uff94\104\uff94\107\uff94\110\uff94\111\uff94\113" +
    "\uff94\114\uff94\116\uff94\117\uff94\126\uff94\134\uff94\136\uff94" +
    "\137\uff94\143\uff94\153\uff94\155\uff94\160\uff94\161\uff94\165" +
    "\uff94\171\uff94\173\uff94\174\uff94\001\002\000\006\010\uff6b" +
    "\011\uff6b\001\002\000\006\010\uff73\011\uff73\001\002\000" +
    "\070\005\014\051\352\067\345\070\343\075\337\100\326" +
    "\104\325\107\322\110\353\111\351\113\336\114\335\116" +
    "\334\117\333\126\346\134\340\136\330\137\327\143\324" +
    "\153\350\155\347\160\344\161\342\165\331\171\323\173" +
    "\016\174\015\001\002\000\070\005\uffa1\051\uffa1\067\uffa1" +
    "\070\uffa1\075\uffa1\100\uffa1\104\uffa1\107\uffa1\110\uffa1\111" +
    "\uffa1\113\uffa1\114\uffa1\116\uffa1\117\uffa1\126\uffa1\134\uffa1" +
    "\136\uffa1\137\uffa1\143\uffa1\153\uffa1\155\uffa1\160\uffa1\161" +
    "\uffa1\165\uffa1\171\uffa1\173\uffa1\174\uffa1\001\002\000\036" +
    "\010\ufff9\011\ufff9\057\ufff9\077\ufff9\102\ufff9\106\ufff9\115" +
    "\ufff9\122\ufff9\125\ufff9\156\ufff9\162\ufff9\163\ufff9\167\ufff9" +
    "\170\ufff9\001\002\000\070\005\uffa3\051\uffa3\067\uffa3\070" +
    "\uffa3\075\uffa3\100\uffa3\104\uffa3\107\uffa3\110\uffa3\111\uffa3" +
    "\113\uffa3\114\uffa3\116\uffa3\117\uffa3\126\uffa3\134\uffa3\136" +
    "\uffa3\137\uffa3\143\uffa3\153\uffa3\155\uffa3\160\uffa3\161\uffa3" +
    "\165\uffa3\171\uffa3\173\uffa3\174\uffa3\001\002\000\070\005" +
    "\uffa0\051\uffa0\067\uffa0\070\uffa0\075\uffa0\100\uffa0\104\uffa0" +
    "\107\uffa0\110\uffa0\111\uffa0\113\uffa0\114\uffa0\116\uffa0\117" +
    "\uffa0\126\uffa0\134\uffa0\136\uffa0\137\uffa0\143\uffa0\153\uffa0" +
    "\155\uffa0\160\uffa0\161\uffa0\165\uffa0\171\uffa0\173\uffa0\174" +
    "\uffa0\001\002\000\070\005\uffab\051\uffab\067\uffab\070\uffab" +
    "\075\uffab\100\uffab\104\uffab\107\uffab\110\uffab\111\uffab\113" +
    "\uffab\114\uffab\116\uffab\117\uffab\126\uffab\134\uffab\136\uffab" +
    "\137\uffab\143\uffab\153\uffab\155\uffab\160\uffab\161\uffab\165" +
    "\uffab\171\uffab\173\uffab\174\uffab\001\002\000\070\005\uffaa" +
    "\051\uffaa\067\uffaa\070\uffaa\075\uffaa\100\uffaa\104\uffaa\107" +
    "\uffaa\110\uffaa\111\uffaa\113\uffaa\114\uffaa\116\uffaa\117\uffaa" +
    "\126\uffaa\134\uffaa\136\uffaa\137\uffaa\143\uffaa\153\uffaa\155" +
    "\uffaa\160\uffaa\161\uffaa\165\uffaa\171\uffaa\173\uffaa\174\uffaa" +
    "\001\002\000\070\005\uffa2\051\uffa2\067\uffa2\070\uffa2\075" +
    "\uffa2\100\uffa2\104\uffa2\107\uffa2\110\uffa2\111\uffa2\113\uffa2" +
    "\114\uffa2\116\uffa2\117\uffa2\126\uffa2\134\uffa2\136\uffa2\137" +
    "\uffa2\143\uffa2\153\uffa2\155\uffa2\160\uffa2\161\uffa2\165\uffa2" +
    "\171\uffa2\173\uffa2\174\uffa2\001\002\000\070\005\uff9e\051" +
    "\uff9e\067\uff9e\070\uff9e\075\uff9e\100\uff9e\104\uff9e\107\uff9e" +
    "\110\uff9e\111\uff9e\113\uff9e\114\uff9e\116\uff9e\117\uff9e\126" +
    "\uff9e\134\uff9e\136\uff9e\137\uff9e\143\uff9e\153\uff9e\155\uff9e" +
    "\160\uff9e\161\uff9e\165\uff9e\171\uff9e\173\uff9e\174\uff9e\001" +
    "\002\000\004\020\354\001\002\000\070\005\uff97\051\uff97" +
    "\067\uff97\070\uff97\075\uff97\100\uff97\104\uff97\107\uff97\110" +
    "\uff97\111\uff97\113\uff97\114\uff97\116\uff97\117\uff97\126\uff97" +
    "\134\uff97\136\uff97\137\uff97\143\uff97\153\uff97\155\uff97\160" +
    "\uff97\161\uff97\165\uff97\171\uff97\173\uff97\174\uff97\001\002" +
    "\000\070\005\uff9b\051\uff9b\067\uff9b\070\uff9b\075\uff9b\100" +
    "\uff9b\104\uff9b\107\uff9b\110\uff9b\111\uff9b\113\uff9b\114\uff9b" +
    "\116\uff9b\117\uff9b\126\uff9b\134\uff9b\136\uff9b\137\uff9b\143" +
    "\uff9b\153\uff9b\155\uff9b\160\uff9b\161\uff9b\165\uff9b\171\uff9b" +
    "\173\uff9b\174\uff9b\001\002\000\070\005\uff9d\051\uff9d\067" +
    "\uff9d\070\uff9d\075\uff9d\100\uff9d\104\uff9d\107\uff9d\110\uff9d" +
    "\111\uff9d\113\uff9d\114\uff9d\116\uff9d\117\uff9d\126\uff9d\134" +
    "\uff9d\136\uff9d\137\uff9d\143\uff9d\153\uff9d\155\uff9d\160\uff9d" +
    "\161\uff9d\165\uff9d\171\uff9d\173\uff9d\174\uff9d\001\002\000" +
    "\070\005\uff9c\051\uff9c\067\uff9c\070\uff9c\075\uff9c\100\uff9c" +
    "\104\uff9c\107\uff9c\110\uff9c\111\uff9c\113\uff9c\114\uff9c\116" +
    "\uff9c\117\uff9c\126\uff9c\134\uff9c\136\uff9c\137\uff9c\143\uff9c" +
    "\153\uff9c\155\uff9c\160\uff9c\161\uff9c\165\uff9c\171\uff9c\173" +
    "\uff9c\174\uff9c\001\002\000\070\005\uffa6\051\uffa6\067\uffa6" +
    "\070\uffa6\075\uffa6\100\uffa6\104\uffa6\107\uffa6\110\uffa6\111" +
    "\uffa6\113\uffa6\114\uffa6\116\uffa6\117\uffa6\126\uffa6\134\uffa6" +
    "\136\uffa6\137\uffa6\143\uffa6\153\uffa6\155\uffa6\160\uffa6\161" +
    "\uffa6\165\uffa6\171\uffa6\173\uffa6\174\uffa6\001\002\000\070" +
    "\005\uff96\051\uff96\067\uff96\070\uff96\075\uff96\100\uff96\104" +
    "\uff96\107\uff96\110\uff96\111\uff96\113\uff96\114\uff96\116\uff96" +
    "\117\uff96\126\uff96\134\uff96\136\uff96\137\uff96\143\uff96\153" +
    "\uff96\155\uff96\160\uff96\161\uff96\165\uff96\171\uff96\173\uff96" +
    "\174\uff96\001\002\000\070\005\uff93\051\uff93\067\uff93\070" +
    "\uff93\075\uff93\100\uff93\104\uff93\107\uff93\110\uff93\111\uff93" +
    "\113\uff93\114\uff93\116\uff93\117\uff93\126\uff93\134\uff93\136" +
    "\uff93\137\uff93\143\uff93\153\uff93\155\uff93\160\uff93\161\uff93" +
    "\165\uff93\171\uff93\173\uff93\174\uff93\001\002\000\070\005" +
    "\uffa4\051\uffa4\067\uffa4\070\uffa4\075\uffa4\100\uffa4\104\uffa4" +
    "\107\uffa4\110\uffa4\111\uffa4\113\uffa4\114\uffa4\116\uffa4\117" +
    "\uffa4\126\uffa4\134\uffa4\136\uffa4\137\uffa4\143\uffa4\153\uffa4" +
    "\155\uffa4\160\uffa4\161\uffa4\165\uffa4\171\uffa4\173\uffa4\174" +
    "\uffa4\001\002\000\070\005\uff99\051\uff99\067\uff99\070\uff99" +
    "\075\uff99\100\uff99\104\uff99\107\uff99\110\uff99\111\uff99\113" +
    "\uff99\114\uff99\116\uff99\117\uff99\126\uff99\134\uff99\136\uff99" +
    "\137\uff99\143\uff99\153\uff99\155\uff99\160\uff99\161\uff99\165" +
    "\uff99\171\uff99\173\uff99\174\uff99\001\002\000\070\005\uff9a" +
    "\051\uff9a\067\uff9a\070\uff9a\075\uff9a\100\uff9a\104\uff9a\107" +
    "\uff9a\110\uff9a\111\uff9a\113\uff9a\114\uff9a\116\uff9a\117\uff9a" +
    "\126\uff9a\134\uff9a\136\uff9a\137\uff9a\143\uff9a\153\uff9a\155" +
    "\uff9a\160\uff9a\161\uff9a\165\uff9a\171\uff9a\173\uff9a\174\uff9a" +
    "\001\002\000\070\005\uffa5\051\uffa5\067\uffa5\070\uffa5\075" +
    "\uffa5\100\uffa5\104\uffa5\107\uffa5\110\uffa5\111\uffa5\113\uffa5" +
    "\114\uffa5\116\uffa5\117\uffa5\126\uffa5\134\uffa5\136\uffa5\137" +
    "\uffa5\143\uffa5\153\uffa5\155\uffa5\160\uffa5\161\uffa5\165\uffa5" +
    "\171\uffa5\173\uffa5\174\uffa5\001\002\000\070\005\uffa9\051" +
    "\uffa9\067\uffa9\070\uffa9\075\uffa9\100\uffa9\104\uffa9\107\uffa9" +
    "\110\uffa9\111\uffa9\113\uffa9\114\uffa9\116\uffa9\117\uffa9\126" +
    "\uffa9\134\uffa9\136\uffa9\137\uffa9\143\uffa9\153\uffa9\155\uffa9" +
    "\160\uffa9\161\uffa9\165\uffa9\171\uffa9\173\uffa9\174\uffa9\001" +
    "\002\000\070\005\uffac\051\uffac\067\uffac\070\uffac\075\uffac" +
    "\100\uffac\104\uffac\107\uffac\110\uffac\111\uffac\113\uffac\114" +
    "\uffac\116\uffac\117\uffac\126\uffac\134\uffac\136\uffac\137\uffac" +
    "\143\uffac\153\uffac\155\uffac\160\uffac\161\uffac\165\uffac\171" +
    "\uffac\173\uffac\174\uffac\001\002\000\070\005\uff9f\051\uff9f" +
    "\067\uff9f\070\uff9f\075\uff9f\100\uff9f\104\uff9f\107\uff9f\110" +
    "\uff9f\111\uff9f\113\uff9f\114\uff9f\116\uff9f\117\uff9f\126\uff9f" +
    "\134\uff9f\136\uff9f\137\uff9f\143\uff9f\153\uff9f\155\uff9f\160" +
    "\uff9f\161\uff9f\165\uff9f\171\uff9f\173\uff9f\174\uff9f\001\002" +
    "\000\070\005\uff98\051\uff98\067\uff98\070\uff98\075\uff98\100" +
    "\uff98\104\uff98\107\uff98\110\uff98\111\uff98\113\uff98\114\uff98" +
    "\116\uff98\117\uff98\126\uff98\134\uff98\136\uff98\137\uff98\143" +
    "\uff98\153\uff98\155\uff98\160\uff98\161\uff98\165\uff98\171\uff98" +
    "\173\uff98\174\uff98\001\002\000\070\005\uffa8\051\uffa8\067" +
    "\uffa8\070\uffa8\075\uffa8\100\uffa8\104\uffa8\107\uffa8\110\uffa8" +
    "\111\uffa8\113\uffa8\114\uffa8\116\uffa8\117\uffa8\126\uffa8\134" +
    "\uffa8\136\uffa8\137\uffa8\143\uffa8\153\uffa8\155\uffa8\160\uffa8" +
    "\161\uffa8\165\uffa8\171\uffa8\173\uffa8\174\uffa8\001\002\000" +
    "\070\005\uffa7\051\uffa7\067\uffa7\070\uffa7\075\uffa7\100\uffa7" +
    "\104\uffa7\107\uffa7\110\uffa7\111\uffa7\113\uffa7\114\uffa7\116" +
    "\uffa7\117\uffa7\126\uffa7\134\uffa7\136\uffa7\137\uffa7\143\uffa7" +
    "\153\uffa7\155\uffa7\160\uffa7\161\uffa7\165\uffa7\171\uffa7\173" +
    "\uffa7\174\uffa7\001\002\000\010\005\014\173\016\174\015" +
    "\001\002\000\070\005\uff95\051\uff95\067\uff95\070\uff95\075" +
    "\uff95\100\uff95\104\uff95\107\uff95\110\uff95\111\uff95\113\uff95" +
    "\114\uff95\116\uff95\117\uff95\126\uff95\134\uff95\136\uff95\137" +
    "\uff95\143\uff95\153\uff95\155\uff95\160\uff95\161\uff95\165\uff95" +
    "\171\uff95\173\uff95\174\uff95\001\002\000\006\013\062\171" +
    "\060\001\002\000\004\010\360\001\002\000\010\005\014" +
    "\173\016\174\015\001\002\000\006\010\362\011\363\001" +
    "\002\000\014\005\014\145\366\146\365\173\016\174\015" +
    "\001\002\000\036\010\uffde\011\uffde\057\uffde\077\uffde\102" +
    "\uffde\106\uffde\115\uffde\122\uffde\125\uffde\156\uffde\162\uffde" +
    "\163\uffde\167\uffde\170\uffde\001\002\000\004\011\u010a\001" +
    "\002\000\004\012\375\001\002\000\004\012\367\001\002" +
    "\000\030\005\014\024\143\025\142\027\140\031\137\040" +
    "\136\041\134\042\135\050\145\173\016\174\015\001\002" +
    "\000\006\010\371\011\372\001\002\000\010\005\014\173" +
    "\016\174\015\001\002\000\036\010\uffe0\011\uffe0\057\uffe0" +
    "\077\uffe0\102\uffe0\106\uffe0\115\uffe0\122\uffe0\125\uffe0\156" +
    "\uffe0\162\uffe0\163\uffe0\167\uffe0\170\uffe0\001\002\000\004" +
    "\011\374\001\002\000\036\010\uffe1\011\uffe1\057\uffe1\077" +
    "\uffe1\102\uffe1\106\uffe1\115\uffe1\122\uffe1\125\uffe1\156\uffe1" +
    "\162\uffe1\163\uffe1\167\uffe1\170\uffe1\001\002\000\030\005" +
    "\014\024\143\025\142\027\140\031\137\040\136\041\134" +
    "\042\135\050\145\173\016\174\015\001\002\000\006\010" +
    "\377\011\u0100\001\002\000\012\005\014\145\u0102\173\016" +
    "\174\015\001\002\000\036\010\uffe2\011\uffe2\057\uffe2\077" +
    "\uffe2\102\uffe2\106\uffe2\115\uffe2\122\uffe2\125\uffe2\156\uffe2" +
    "\162\uffe2\163\uffe2\167\uffe2\170\uffe2\001\002\000\004\011" +
    "\u0109\001\002\000\004\012\u0103\001\002\000\030\005\014" +
    "\024\143\025\142\027\140\031\137\040\136\041\134\042" +
    "\135\050\145\173\016\174\015\001\002\000\006\010\u0105" +
    "\011\u0106\001\002\000\010\005\014\173\016\174\015\001" +
    "\002\000\036\010\uffe4\011\uffe4\057\uffe4\077\uffe4\102\uffe4" +
    "\106\uffe4\115\uffe4\122\uffe4\125\uffe4\156\uffe4\162\uffe4\163" +
    "\uffe4\167\uffe4\170\uffe4\001\002\000\004\011\u0108\001\002" +
    "\000\036\010\uffe5\011\uffe5\057\uffe5\077\uffe5\102\uffe5\106" +
    "\uffe5\115\uffe5\122\uffe5\125\uffe5\156\uffe5\162\uffe5\163\uffe5" +
    "\167\uffe5\170\uffe5\001\002\000\036\010\uffe3\011\uffe3\057" +
    "\uffe3\077\uffe3\102\uffe3\106\uffe3\115\uffe3\122\uffe3\125\uffe3" +
    "\156\uffe3\162\uffe3\163\uffe3\167\uffe3\170\uffe3\001\002\000" +
    "\036\010\uffdf\011\uffdf\057\uffdf\077\uffdf\102\uffdf\106\uffdf" +
    "\115\uffdf\122\uffdf\125\uffdf\156\uffdf\162\uffdf\163\uffdf\167" +
    "\uffdf\170\uffdf\001\002\000\006\013\237\171\236\001\002" +
    "\000\004\010\u010d\001\002\000\010\005\014\173\016\174" +
    "\015\001\002\000\004\010\u010f\001\002\000\004\171\u0110" +
    "\001\002\000\004\011\u0111\001\002\000\050\010\ufff1\011" +
    "\ufff1\057\ufff1\066\ufff1\077\ufff1\102\ufff1\103\ufff1\106\ufff1" +
    "\115\ufff1\122\ufff1\123\ufff1\124\ufff1\125\ufff1\133\ufff1\156" +
    "\ufff1\162\ufff1\163\ufff1\167\ufff1\170\ufff1\001\002\000\036" +
    "\010\uffe8\011\uffe8\057\uffe8\077\uffe8\102\uffe8\106\uffe8\115" +
    "\uffe8\122\uffe8\125\uffe8\156\uffe8\162\uffe8\163\uffe8\167\uffe8" +
    "\170\uffe8\001\002\000\036\010\ufff7\011\ufff7\057\ufff7\077" +
    "\ufff7\102\ufff7\106\ufff7\115\ufff7\122\ufff7\125\ufff7\156\ufff7" +
    "\162\ufff7\163\ufff7\167\ufff7\170\ufff7\001\002\000\036\010" +
    "\uff7a\011\uff7a\057\uff7a\077\uff7a\102\uff7a\106\uff7a\115\uff7a" +
    "\122\uff7a\125\uff7a\156\uff7a\162\uff7a\163\uff7a\167\uff7a\170" +
    "\uff7a\001\002\000\036\010\uff78\011\uff78\057\uff78\077\uff78" +
    "\102\uff78\106\uff78\115\uff78\122\uff78\125\uff78\156\uff78\162" +
    "\uff78\163\uff78\167\uff78\170\uff78\001\002\000\036\010\uff79" +
    "\011\uff79\057\uff79\077\uff79\102\uff79\106\uff79\115\uff79\122" +
    "\uff79\125\uff79\156\uff79\162\uff79\163\uff79\167\uff79\170\uff79" +
    "\001\002\000\036\010\uff76\011\uff76\057\uff76\077\uff76\102" +
    "\uff76\106\uff76\115\uff76\122\uff76\125\uff76\156\uff76\162\uff76" +
    "\163\uff76\167\uff76\170\uff76\001\002\000\036\010\uff77\011" +
    "\uff77\057\uff77\077\uff77\102\uff77\106\uff77\115\uff77\122\uff77" +
    "\125\uff77\156\uff77\162\uff77\163\uff77\167\uff77\170\uff77\001" +
    "\002\000\006\013\177\171\175\001\002\000\004\010\u011b" +
    "\001\002\000\010\005\014\173\016\174\015\001\002\000" +
    "\004\010\u011d\001\002\000\004\151\u011e\001\002\000\004" +
    "\012\u011f\001\002\000\022\024\143\025\142\027\140\031" +
    "\137\040\136\041\134\042\135\050\145\001\002\000\010" +
    "\011\u0121\132\151\152\150\001\002\000\036\010\uffd7\011" +
    "\uffd7\057\uffd7\077\uffd7\102\uffd7\106\uffd7\115\uffd7\122\uffd7" +
    "\125\uffd7\156\uffd7\162\uffd7\163\uffd7\167\uffd7\170\uffd7\001" +
    "\002\000\006\013\237\171\236\001\002\000\004\010\u0124" +
    "\001\002\000\010\005\014\173\016\174\015\001\002\000" +
    "\004\010\u0126\001\002\000\004\013\u0127\001\002\000\032" +
    "\005\014\014\uffc6\024\143\025\142\027\140\031\137\040" +
    "\136\041\134\042\135\050\145\173\016\174\015\001\002" +
    "\000\004\014\u0129\001\002\000\004\011\u012a\001\002\000" +
    "\050\010\uffee\011\uffee\057\uffee\066\uffee\077\uffee\102\uffee" +
    "\103\uffee\106\uffee\115\uffee\122\uffee\123\uffee\124\uffee\125" +
    "\uffee\133\uffee\156\uffee\162\uffee\163\uffee\167\uffee\170\uffee" +
    "\001\002\000\006\013\237\171\236\001\002\000\004\010" +
    "\u012d\001\002\000\010\005\014\173\016\174\015\001\002" +
    "\000\004\010\u012f\001\002\000\006\145\u0131\146\u0130\001" +
    "\002\000\004\012\u0135\001\002\000\004\012\u0132\001\002" +
    "\000\022\024\143\025\142\027\140\031\137\040\136\041" +
    "\134\042\135\050\145\001\002\000\010\011\u0134\132\151" +
    "\152\150\001\002\000\050\010\uffef\011\uffef\057\uffef\066" +
    "\uffef\077\uffef\102\uffef\103\uffef\106\uffef\115\uffef\122\uffef" +
    "\123\uffef\124\uffef\125\uffef\133\uffef\156\uffef\162\uffef\163" +
    "\uffef\167\uffef\170\uffef\001\002\000\022\024\143\025\142" +
    "\027\140\031\137\040\136\041\134\042\135\050\145\001" +
    "\002\000\010\010\u0137\132\151\152\150\001\002\000\004" +
    "\145\u0138\001\002\000\004\012\u0139\001\002\000\022\024" +
    "\143\025\142\027\140\031\137\040\136\041\134\042\135" +
    "\050\145\001\002\000\010\011\u013b\132\151\152\150\001" +
    "\002\000\050\010\ufff0\011\ufff0\057\ufff0\066\ufff0\077\ufff0" +
    "\102\ufff0\103\ufff0\106\ufff0\115\ufff0\122\ufff0\123\ufff0\124" +
    "\ufff0\125\ufff0\133\ufff0\156\ufff0\162\ufff0\163\ufff0\167\ufff0" +
    "\170\ufff0\001\002\000\006\013\177\171\175\001\002\000" +
    "\004\010\u013e\001\002\000\004\013\u013f\001\002\000\014" +
    "\005\014\014\uffaf\172\u0142\173\016\174\015\001\002\000" +
    "\014\016\u014e\017\u0152\061\u014f\072\u0151\074\u0150\001\002" +
    "\000\004\014\u014c\001\002\000\004\017\u0146\001\002\000" +
    "\006\010\u0144\014\uffae\001\002\000\014\005\014\014\uffaf" +
    "\172\u0142\173\016\174\015\001\002\000\004\014\uffad\001" +
    "\002\000\010\005\014\173\016\174\015\001\002\000\004" +
    "\017\u0148\001\002\000\004\172\u0149\001\002\000\004\105" +
    "\u014a\001\002\000\010\005\014\173\016\174\015\001\002" +
    "\000\006\010\uffb0\014\uffb0\001\002\000\004\011\u014d\001" +
    "\002\000\036\010\uffd6\011\uffd6\057\uffd6\077\uffd6\102\uffd6" +
    "\106\uffd6\115\uffd6\122\uffd6\125\uffd6\156\uffd6\162\uffd6\163" +
    "\uffd6\167\uffd6\170\uffd6\001\002\000\004\172\u0156\001\002" +
    "\000\006\010\uffb3\014\uffb3\001\002\000\006\010\uffb5\014" +
    "\uffb5\001\002\000\006\010\uffb4\014\uffb4\001\002\000\004" +
    "\172\u0153\001\002\000\004\105\u0154\001\002\000\010\005" +
    "\014\173\016\174\015\001\002\000\006\010\uffb1\014\uffb1" +
    "\001\002\000\004\105\u0157\001\002\000\010\005\014\173" +
    "\016\174\015\001\002\000\006\010\uffb2\014\uffb2\001\002" +
    "\000\006\013\062\171\060\001\002\000\004\010\u015b\001" +
    "\002\000\010\005\014\173\016\174\015\001\002\000\006" +
    "\010\u015d\011\u015e\001\002\000\006\145\u0160\146\u015f\001" +
    "\002\000\036\010\uffeb\011\uffeb\057\uffeb\077\uffeb\102\uffeb" +
    "\106\uffeb\115\uffeb\122\uffeb\125\uffeb\156\uffeb\162\uffeb\163" +
    "\uffeb\167\uffeb\170\uffeb\001\002\000\004\012\u0164\001\002" +
    "\000\004\012\u0161\001\002\000\022\024\143\025\142\027" +
    "\140\031\137\040\136\041\134\042\135\050\145\001\002" +
    "\000\010\011\u0163\132\151\152\150\001\002\000\036\010" +
    "\uffea\011\uffea\057\uffea\077\uffea\102\uffea\106\uffea\115\uffea" +
    "\122\uffea\125\uffea\156\uffea\162\uffea\163\uffea\167\uffea\170" +
    "\uffea\001\002\000\022\024\143\025\142\027\140\031\137" +
    "\040\136\041\134\042\135\050\145\001\002\000\010\010" +
    "\u0166\132\151\152\150\001\002\000\004\145\u0167\001\002" +
    "\000\004\012\u0168\001\002\000\022\024\143\025\142\027" +
    "\140\031\137\040\136\041\134\042\135\050\145\001\002" +
    "\000\010\011\u016a\132\151\152\150\001\002\000\036\010" +
    "\uffe9\011\uffe9\057\uffe9\077\uffe9\102\uffe9\106\uffe9\115\uffe9" +
    "\122\uffe9\125\uffe9\156\uffe9\162\uffe9\163\uffe9\167\uffe9\170" +
    "\uffe9\001\002\000\004\005\u016c\001\002\000\004\174\u016d" +
    "\001\002\000\004\006\u016e\001\002\000\010\002\uffff\004" +
    "\uffff\035\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\006\002\004\004\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\052\006\036\007\032\010\031\012\041\013" +
    "\053\014\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0112\001\001\000\004\011\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\052\006\036\007\032" +
    "\010\031\012\041\013\053\014\055\001\001\000\002\001" +
    "\001\000\004\022\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\062\001\001\000\004\024\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\146\016\140" +
    "\017\145\035\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\155\001\001\000\002\001\001\000\012\015\146\016" +
    "\140\017\157\035\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\172" +
    "\001\001\000\002\001\001\000\004\012\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\177\001" +
    "\001\000\004\024\065\001\001\000\002\001\001\000\004" +
    "\035\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\205\001\001\000\002\001\001\000\004\035\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\215" +
    "\001\001\000\002\001\001\000\004\035\217\001\001\000" +
    "\002\001\001\000\004\035\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\227\001\001\000\004" +
    "\024\065\001\001\000\002\001\001\000\004\035\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\237" +
    "\001\001\000\002\001\001\000\004\025\245\001\001\000" +
    "\002\001\001\000\004\035\241\001\001\000\002\001\001" +
    "\000\004\035\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\065\001\001\000\002\001\001\000\004" +
    "\021\250\001\001\000\002\001\001\000\004\035\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\340\035\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\354\001\001\000" +
    "\002\001\001\000\004\022\356\001\001\000\002\001\001" +
    "\000\004\035\360\001\001\000\002\001\001\000\004\035" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\146\016\367\035" +
    "\143\001\001\000\002\001\001\000\004\035\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\146\016\375\035\143\001\001\000\002\001\001" +
    "\000\004\035\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\146\016\u0103\035\143" +
    "\001\001\000\002\001\001\000\004\035\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u010b\001\001\000" +
    "\002\001\001\000\004\035\u010d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0119\001\001\000\002\001\001\000\004" +
    "\035\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0122\001\001\000\002\001" +
    "\001\000\004\035\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\146\016\140\017\u0127\035\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u012b\001\001\000\002\001\001\000\004\035" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0139\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u013c\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\u0142\027\u0140\035\u013f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\u0142\027\u0144\035\u013f\001\001\000\002" +
    "\001\001\000\004\035\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u014a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u0157\001\001\000\002\001\001\000\004\022\u0159\001" +
    "\001\000\002\001\001\000\004\035\u015b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u0161\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0168\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public net.lemonmodel.patterns.parser.Absyn.Statements pStatements() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (net.lemonmodel.patterns.parser.Absyn.Statements) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // URI ::= FullURI 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURI(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // URI ::= _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName2(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // URI ::= _IDENT_ _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Register ::= _SYMB_115 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVulgarRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Register ::= _SYMB_111 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETechnicalRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Register ::= _SYMB_110 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETabooRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Register ::= _SYMB_106 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlangRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Register ::= _SYMB_81 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENeutralRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Register ::= _SYMB_78 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIronicRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Register ::= _SYMB_73 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInHouseRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Register ::= _SYMB_66 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFormalRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Register ::= _SYMB_62 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFacetiousRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Register ::= _SYMB_59 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDialectRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Register ::= _SYMB_43 
            {
              net.lemonmodel.patterns.parser.Absyn.Register RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBenchLevelRegister(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Register",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Gender ::= _SYMB_87 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOtherGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Gender ::= _SYMB_50 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommonGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Gender ::= _SYMB_80 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENeutGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Gender ::= _SYMB_63 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFemGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Gender ::= _SYMB_79 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EMascGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // POSTag ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyPOS(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // POSTag ::= _SYMB_114 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // POSTag ::= _SYMB_107 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlashPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // POSTag ::= _SYMB_104 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESemiColonPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // POSTag ::= _SYMB_100 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPunctuationPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // POSTag ::= _SYMB_96 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPronounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // POSTag ::= _SYMB_94 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // POSTag ::= _SYMB_93 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // POSTag ::= _SYMB_92 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPointPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // POSTag ::= _SYMB_89 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // POSTag ::= _SYMB_85 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENumeralPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // POSTag ::= _SYMB_84 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // POSTag ::= _SYMB_77 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInterjectionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // POSTag ::= _SYMB_58 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDeterminerPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // POSTag ::= _SYMB_55 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // POSTag ::= _SYMB_53 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConjunctionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // POSTag ::= _SYMB_49 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // POSTag ::= _SYMB_48 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EColonPOSPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // POSTag ::= _SYMB_46 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECircumpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // POSTag ::= _SYMB_44 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBulletPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // POSTag ::= _SYMB_41 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // POSTag ::= _SYMB_40 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdverbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // POSTag ::= _SYMB_39 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // POSTag ::= _SYMB_38 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjectivePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListCategory ::= ListCategory Category 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_1 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Category p_2 = (net.lemonmodel.patterns.parser.Absyn.Category)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ListCategory ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListCategory(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Category ::= URI _SYMB_12 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyCat(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Category ::= _SYMB_88 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticiple(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Category ::= _SYMB_75 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInfinitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Category ::= _SYMB_69 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGerundive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Category ::= _SYMB_52 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConditional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Category ::= _SYMB_108 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubjunctive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Category ::= _SYMB_74 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndicative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Category ::= _SYMB_71 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Category ::= _SYMB_72 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperfect(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Category ::= _SYMB_113 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EThirdPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Category ::= _SYMB_103 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESecondPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Category ::= _SYMB_64 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFirstPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Category ::= _SYMB_67 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFuture(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Category ::= _SYMB_90 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Category ::= _SYMB_95 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPresent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Category ::= _SYMB_109 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperlative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Category ::= _SYMB_51 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EComparative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Category ::= _SYMB_57 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Category ::= _SYMB_68 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGenitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Category ::= _SYMB_37 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAccusative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Category ::= _SYMB_82 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENominative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Category ::= _SYMB_91 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPlural(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Category ::= _SYMB_60 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Category ::= _SYMB_105 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESingular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListScalarMembership ::= ScalarMembership _SYMB_4 ListScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_3 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListScalarMembership ::= ScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListScalarMembership ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ScalarMembership ::= _DOUBLE_ _SYMB_11 URI _SYMB_11 _DOUBLE_ _SYMB_65 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_5 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.BoundedScalarMembership(p_1,p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ScalarMembership ::= URI _SYMB_11 _DOUBLE_ _SYMB_65 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.LessThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ScalarMembership ::= URI _SYMB_10 _DOUBLE_ _SYMB_65 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.GreaterThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ScalarMembership ::= URI _SYMB_45 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CentralScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ScalarMembership ::= URI _SYMB_54 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ContravariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ScalarMembership ::= URI _SYMB_56 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CovariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListPOSTaggedWord ::= ListPOSTaggedWord POSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListPOSTaggedWord ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // POSTaggedWord ::= _STRING_ _SYMB_9 _STRING_ _SYMB_9 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_5 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELemmaPOSTaggedWord(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // POSTaggedWord ::= _STRING_ _SYMB_9 _STRING_ _SYMB_9 POSTag _SYMB_6 _SYMB_70 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_5 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELemmaPOSTaggedHeadWord(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // POSTaggedWord ::= _STRING_ _SYMB_9 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // POSTaggedWord ::= _STRING_ _SYMB_9 POSTag _SYMB_6 _SYMB_70 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedHeadWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PNP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PNP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListOntologyFrameElement ::= OntologyFrameElement _SYMB_4 ListOntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_3 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListOntologyFrameElement ::= OntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListOntologyFrameElement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OntologyFrameElement ::= Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArgAsOFE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OntologyFrameElement ::= URI _SYMB_42 Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_3 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURIAsSynArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Arg ::= _SYMB_28 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPossessiveAdjunct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Arg ::= _SYMB_29 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Arg ::= _SYMB_30 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arg ::= _SYMB_17 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeSubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Arg ::= _SYMB_16 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Arg ::= _SYMB_21 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Arg ::= _SYMB_19 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Arg ::= _SYMB_36 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arg ::= Arg _SYMB_102 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERestrictedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arg ::= Arg _SYMB_86 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOptionalArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListPatternType ::= PatternType _SYMB_4 ListPatternType 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.PatternType p_1 = (net.lemonmodel.patterns.parser.Absyn.PatternType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPatternType p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPatternType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListPatternType ::= PatternType 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.PatternType p_1 = (net.lemonmodel.patterns.parser.Absyn.PatternType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPatternType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListPatternType ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPatternType RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPatternType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AdjectivePattern ::= _SYMB_34 _SYMB_3 AP _SYMB_4 _SYMB_7 ListScalarMembership _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_6 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EScalarAdjective(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AdjectivePattern ::= _SYMB_31 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _SYMB_101 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalAdjective(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AdjectivePattern ::= _SYMB_23 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveDataPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AdjectivePattern ::= _SYMB_24 _SYMB_3 AP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveObjectPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AdjectivePattern ::= _SYMB_22 _SYMB_3 AP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VerbPattern3 ::= _SYMB_20 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEventVerb(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VerbPattern2 ::= _SYMB_76 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VerbPattern2 ::= _SYMB_61 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb8(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb7(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb6(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb5(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_98 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb4(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_98 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb3(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_98 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb2(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_98 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_97 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_15 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb1(p_3,p_5,p_9,p_13,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VerbPattern ::= VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDunnotelicEventVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VerbPattern ::= _SYMB_83 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENontelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VerbPattern ::= _SYMB_112 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VerbPattern ::= _SYMB_35 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_98 _SYMB_6 Arg _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb3(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VerbPattern ::= _SYMB_35 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VerbPattern ::= _SYMB_35 _SYMB_3 VP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb1(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_47 _SYMB_6 URI _SYMB_4 _SYMB_99 _SYMB_6 URI _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun2(p_3,p_7,p_11,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_47 _SYMB_6 URI _SYMB_4 _SYMB_99 _SYMB_6 URI _SYMB_4 _SYMB_98 _SYMB_6 Arg _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_19 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun1(p_3,p_7,p_11,p_15,p_19); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NounPattern ::= _SYMB_32 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalMultivalentNoun(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NounPattern ::= _SYMB_33 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NounPattern ::= _SYMB_33 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_98 _SYMB_6 Arg _SYMB_4 _SYMB_97 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun1(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NounPattern ::= _SYMB_18 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDataPropertyNoun(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NounPattern ::= _SYMB_27 _SYMB_3 NP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EObjectPropertyNoun(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NounPattern ::= _SYMB_13 _SYMB_3 NP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassNoun(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NounPattern ::= _SYMB_26 _SYMB_3 PNP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.PNP p_3 = (net.lemonmodel.patterns.parser.Absyn.PNP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EName(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Pattern ::= AdjectivePattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.AdjectivePattern p_1 = (net.lemonmodel.patterns.parser.Absyn.AdjectivePattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjective(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Pattern ::= VerbPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Pattern ::= NounPattern Gender 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Gender p_2 = (net.lemonmodel.patterns.parser.Absyn.Gender)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounWithGender(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Pattern ::= NounPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENoun(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Pattern ::= Pattern _SYMB_116 ListCategory _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_3 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithForm(p_1,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PatternType ::= Pattern 
            {
              net.lemonmodel.patterns.parser.Absyn.PatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECorePattern(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternType",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PatternType ::= Pattern Register 
            {
              net.lemonmodel.patterns.parser.Absyn.PatternType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Register p_2 = (net.lemonmodel.patterns.parser.Absyn.Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithRegister(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternType",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStatement ::= ListStatement Statement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Statement p_2 = (net.lemonmodel.patterns.parser.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStatement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= _SYMB_25 _SYMB_3 URI _SYMB_4 _STRING_ _SYMB_4 ListPatternType _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPatternType p_7 = (net.lemonmodel.patterns.parser.Absyn.ListPatternType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELexicon(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= _SYMB_0 _IDENT_ _SYMB_1 FullURI _SYMB_2 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrefix(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Statements ::= ListStatement 
            {
              net.lemonmodel.patterns.parser.Absyn.Statements RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStatments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Statements start_val = (net.lemonmodel.patterns.parser.Absyn.Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

