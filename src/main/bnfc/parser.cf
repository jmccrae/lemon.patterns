token FullURI (["<"] ["^> "]* [">"]) ;

comment "//" ;
comment "/*" "*/" ;

EStatments. Statements ::= [Statement] ;

EPrefix. Statement ::= "@prefix" Ident ":" FullURI "." ;
ELexicon. Statement ::= "Lexicon" "(" URI "," String "," [PatternType] ")" ;
separator Statement "" ;

EPatternWithRegister. PatternType ::= Pattern Register ;
ECorePattern. PatternType ::= Pattern ;
EPatternWithForm. Pattern ::= Pattern "with" [Category] String ;
ENoun. Pattern ::= NounPattern ;
ENounWithGender. Pattern ::= NounPattern Gender ;
EVerb. Pattern ::= VerbPattern ;
EAdjective. Pattern ::= AdjectivePattern ;

EName. NounPattern ::= "Name" "(" PNP "," URI ")" ;
EClassNoun. NounPattern ::= "ClassNoun" "(" NP "," URI ")" ;
ERelationalNoun1. NounPattern ::= "RelationalNoun" "(" NP "," URI "," "propSubj" "=" Arg "," "propObj" "=" Arg ")" ;
ERelationalNoun2. NounPattern ::= "RelationalNoun" "(" NP "," URI "," "propObj" "=" Arg ")" ;
ERelationalMultivalentNoun. NounPattern ::= "RelationalMultivalentNoun" "(" NP "," URI "," "[" [OntologyFrameElement] "]" ")" ;
EClassRelationalNoun1. NounPattern ::= "ClassRelationalNoun" "(" NP "," "class" "=" URI "," "property" "=" URI "," "propSubj" "=" Arg "," "propObj" "=" Arg ")" ;
EClassRelationalNoun2. NounPattern ::= "ClassRelationalNoun" "(" NP "," "class" "=" URI "," "property" "=" URI "," "propObj" "=" Arg ")" ;

EStateVerb1. VerbPattern ::= "StateVerb" "(" VP "," URI ")" ;
EStateVerb2. VerbPattern ::= "StateVerb" "(" VP "," URI "," "propObj" "=" Arg ")" ;
EStateVerb3. VerbPattern ::= "StateVerb" "(" VP "," URI "," "propSubj" "=" Arg "," "propObj" "=" Arg ")" ;
ETelicEventVerb. VerbPattern ::= "telic" VerbPattern2 ;
ENontelicEventVerb. VerbPattern ::= "nontelic" VerbPattern2 ;
EDunnotelicEventVerb. VerbPattern ::= VerbPattern3 ;
EDurativeEventVerb. VerbPattern2 ::= "durative" VerbPattern3 ;
EInstantEventVerb. VerbPattern2 ::= "instant" VerbPattern3 ;
EEventVerb. VerbPattern3 ::= "EventVerb" "(" VP "," URI "," "[" [OntologyFrameElement] "]" ")" ;
EConsequenceVerb1. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," "propSubj" "=" OntologyFrameElement "," "propObj" "=" OntologyFrameElement "," URI ")" ;
EConsequenceVerb2. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," "propSubj" "=" OntologyFrameElement "," "propObj" "=" OntologyFrameElement ")" ;
EConsequenceVerb3. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," "propSubj" "=" OntologyFrameElement "," URI ")" ;
EConsequenceVerb4. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," "propSubj" "=" OntologyFrameElement ")" ;
EConsequenceVerb5. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," "propObj" "=" OntologyFrameElement "," URI ")" ;
EConsequenceVerb6. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," "propObj" "=" OntologyFrameElement ")" ;
EConsequenceVerb7. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," "," URI ")" ;
EConsequenceVerb8. VerbPattern ::= "ConsequenceVerb" "(" VP "," URI "," ")" ;

EIntersectiveAdjective. AdjectivePattern ::= "IntersectiveAdjective" "(" AP "," URI ")" ;
EIntersectiveObjectPropertyAdjective. AdjectivePattern ::= "IntersectiveObjectPropertyAdjective" "(" AP "," URI "," URI ")" ;
EIntersectiveDataPropertyAdjective. AdjectivePattern ::= "IntersectiveDataPropertyAdjective" "(" AP "," URI "," String ")" ;
EPropertyModifyingAdjective. AdjectivePattern ::= "PropertyModifyingAdjective" "(" AP "," URI ")" ;
ERelationalAdjective. AdjectivePattern ::= "RelationalAdjective" "(" AP "," URI "," "relationalArg" "=" Arg ")" ;
EScalarAdjective. AdjectivePattern ::= "ScalarAdjective" "(" AP "," "[" [ScalarMembership] "]" ")" ;

separator PatternType "," ;

EOptionalArg. Arg ::= Arg "optional" ;
ERestrictedArg. Arg ::= Arg "restrictedTo" URI ;
ESubject. Arg ::= "Subject" ;
EDirectObject. Arg ::= "DirectObject" ;
EIndirectObject. Arg ::= "IndirectObject" ;
ECopulativeArg. Arg ::= "CopulativeArg" ;
ECopulativeSubject. Arg ::= "CopulativeSubject" ;
EPrepositionalObject. Arg ::= "PrepositionalObject" "(" String ")" ;
EPostpositionalObject. Arg ::= "PostpositionalObject" "(" String ")" ;
EPossessiveAdjunct. Arg ::= "PossessiveAdjunct" ;

EURIAsSynArg. OntologyFrameElement ::= URI "as" Arg ;
EArgAsOFE. OntologyFrameElement ::= Arg ;
separator OntologyFrameElement "," ;

EPNPSimple. PNP ::= String ;
EPNPComplex. PNP ::= "[" [POSTaggedWord] "]" ;

ENPSimple. NP ::= String ;
ENPComplex. NP ::= "[" [POSTaggedWord] "]" ;

EVPSimple. VP ::= String ;
EVPComplex. VP ::= "[" [POSTaggedWord] "]" ;

EAPSimple. AP ::= String ;
EAPComplex. AP ::= "[" [POSTaggedWord] "]" ;

EPOSTaggedHeadWord. POSTaggedWord ::= String "/" POSTag "=" "head" ;
EPOSTaggedWord. POSTaggedWord ::= String "/" POSTag ;
ELemmaPOSTaggedHeadWord. POSTaggedWord ::= String "/" String "/" POSTag "=" "head" ;
ELemmaPOSTaggedWord. POSTaggedWord ::= String "/" String "/" POSTag ;
separator POSTaggedWord "" ;

CovariantScalarMembership. ScalarMembership ::= URI "covariant" ;
ContravariantScalarMembership. ScalarMembership ::= URI "contravariant" ;
CentralScalarMembership. ScalarMembership ::= URI "central" ;
GreaterThanScalarMembership. ScalarMembership ::= URI ">" Double "for" URI ;
LessThanScalarMembership. ScalarMembership ::= URI "<" Double "for" URI ;
BoundedScalarMembership. ScalarMembership ::= Double "<" URI "<" Double "for" URI ;
separator ScalarMembership "," ;

ESingular. Category ::= "singular" ;
EDual. Category ::= "dual" ;
EPlural. Category ::= "plural" ;
ENominative. Category ::= "nominative" ;
EAccusative. Category ::= "accusative" ;
EGenitive. Category ::= "genitive" ;
EDative. Category ::= "dative" ;
EComparative. Category ::= "comparative" ;
ESuperlative. Category ::= "superlative" ;
EPresent. Category ::= "present" ;
EPast. Category ::= "past" ;
EFuture. Category ::= "future" ;
EFirstPerson. Category ::= "firstPerson" ;
ESecondPerson. Category ::= "secondPerson" ;
EThirdPerson. Category ::= "thirdPerson" ;
EImperfect. Category ::= "imperfect" ;
EImperative. Category ::= "imperative" ;
EIndicative. Category ::= "indicative" ;
ESubjunctive. Category ::= "subjunctive" ;
EConditional. Category ::= "conditional" ;
EGerundive. Category ::= "gerundive" ;
EInfinitive. Category ::= "infinitive" ;
EParticiple. Category ::= "participle" ;
EAnyCat. Category ::= URI "=>" URI ;
separator Category "" ;



EAdjectivePOS. POSTag ::= "adjective" ;
EAdpositionPOS. POSTag ::= "adposition" ; 
EAdverbPOS. POSTag ::= "adverb" ;
EArticlePOS. POSTag ::= "article" ;
EBulletPOS. POSTag ::= "bullet" ;
ECircumpositionPOS. POSTag ::= "circumposition" ;
EColonPOSPOS. POSTag ::= "colon" ;
ECommaPOS. POSTag ::= "comma" ;
EConjunctionPOS. POSTag ::= "conjunction" ;
ECopulaPOS. POSTag ::= "copula" ;
EDeterminerPOS. POSTag ::= "determiner" ;
EInterjectionPOS. POSTag ::= "interjection" ;
ENounPOS. POSTag ::= "noun" ;
ENumeralPOS. POSTag ::= "numeral" ;
EParticlePOS. POSTag ::= "particle" ;
EPointPOS. POSTag ::= "point" ;
EPostpositionPOS. POSTag ::= "postposition" ;
EPrepositionPOS. POSTag ::= "preposition" ;
EPronounPOS. POSTag ::= "pronoun" ;
EPunctuationPOS. POSTag ::= "punctuation" ;
ESemiColonPOS. POSTag ::= "semiColon" ;
ESlashPOS. POSTag ::= "slash" ;
EVerbPOS. POSTag ::= "verb" ;
EAnyPOS. POSTag ::= String ;

EMascGender. Gender ::= "masculine" ;
EFemGender. Gender ::= "feminine" ;
ENeutGender. Gender ::= "neuter" ;
ECommonGender. Gender ::= "commonGender" ;
EOtherGender. Gender ::= "otherGender" ;

EBenchLevelRegister. Register ::= "benchLevelRegister" ;
EDialectRegister. Register ::= "dialectRegister" ;
EFacetiousRegister. Register ::= "facetiousRegister" ;
EFormalRegister. Register ::= "formalRegister" ;
EInHouseRegister. Register ::= "inHouseRegister" ;
EIronicRegister. Register ::= "ironicRegister" ;
ENeutralRegister. Register ::= "neutralRegister" ;
ESlangRegister. Register ::= "slangRegister" ;
ETabooRegister. Register ::= "tabooRegister" ;
ETechnicalRegister. Register ::= "technicalRegister" ;
EVulgarRegister. Register ::= "vulgarRegister" ;

EQName. URI ::= Ident ":" Ident ;
EQName2. URI ::= ":" Ident ;
EURI. URI ::= FullURI ;
